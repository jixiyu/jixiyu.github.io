<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>合约交互时发现访问不了地址的bug</title>
      <link href="/2019/09/29/%E5%90%88%E7%BA%A6%E4%BA%A4%E4%BA%92%E5%8F%91%E7%8E%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/29/%E5%90%88%E7%BA%A6%E4%BA%A4%E4%BA%92%E5%8F%91%E7%8E%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在编写合约交互的过程中，需要一个<strong>web3</strong>实例用来调用合约访问账户等。</p><p>设置一个provider。为了保证你不会覆盖一个已有的provider（Mist浏览器或安装了MetaMak的浏览器会提供Provider），需要先检查是否 <strong>web3</strong> 实例已存在。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  web3 = <span class="keyword">new</span> Web3(web3.currentProvider);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// set the provider you want from Web3.providers</span></span><br><span class="line">  web3 = <span class="keyword">new</span> Web3(<span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">"http://localhost:8545"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以使用<strong>web3</strong>提供的接口方法了。比如：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">web3.eth.defaultAccount</span><br><span class="line">web3.eth.getBalance</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>启动程序<code>npm run dev</code>，打开了浏览器3000端口访问到了首页界面。</p><p>但是发现控制台console出现了错误提示：<strong>invalid address</strong></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7pom0ilibj31ty0hs786.jpg" alt="image-20191007154528876"></p><p>以为是本地由Ganache软件生成的账号程序访问不到。</p><p>上网找解决方法都说账户需要解锁，也就是调用web3的解锁账户的命令。</p><p><code>web3.eth.personal.unlockAccount(web3.eth.defaultAccount).then(console.log(&#39;Account unlocked!&#39;));</code></p><p>但是运行了之后提醒<code>unlockcount</code>函数不存在。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7popvzpv6j31hm08kdhx.jpg" alt="image-20191007154917354"></p><p>之后偶然在网上搜索”metamask访问不了账户地址“这个问题，终于问题得到了解决。</p><p><a href="https://blog.csdn.net/rejames/article/details/89876967" target="_blank" rel="noopener">https://blog.csdn.net/rejames/article/details/89876967</a></p><p>原来最新版的metamask插件默认启用了隐私模式，而官方文档中并没有更新。</p><p>现在新的检查方式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查是否是新的MetaMask 或 DApp浏览器</span></span><br><span class="line"><span class="keyword">var</span> web3Provider;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.ethereum) &#123;</span><br><span class="line">   web3Provider = <span class="built_in">window</span>.ethereum;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 请求用户授权</span></span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">window</span>.ethereum.enable();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 用户不授权时</span></span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"User denied account access"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.web3) &#123;   <span class="comment">// 老版 MetaMask Legacy dapp browsers...</span></span><br><span class="line">  web3Provider = <span class="built_in">window</span>.web3.currentProvider;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  web3Provider = <span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">'http://localhost:8545'</span>);</span><br><span class="line">&#125;</span><br><span class="line">web3 = <span class="keyword">new</span> Web3(web3Provider);</span><br></pre></td></tr></table></figure><p>成功引入后，你现在可以使用 web3 对象的API 了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dapp开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ipfs使用</title>
      <link href="/2019/09/26/ipfs%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/09/26/ipfs%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="1-mac安装ipfs——使用npm工具"><a href="#1-mac安装ipfs——使用npm工具" class="headerlink" title="1.mac安装ipfs——使用npm工具"></a>1.mac安装ipfs——使用npm工具</h4><p><code>sudo npm install ipfs --global</code></p><h4 id="2-本地上传文件并同步网络"><a href="#2-本地上传文件并同步网络" class="headerlink" title="2.本地上传文件并同步网络"></a>2.本地上传文件并同步网络</h4><ol><li><p><code>touch index.html</code></p></li><li><p><code>vim index.html</code></p></li><li><p>初始化过程，生成本地节点</p></li></ol><p><code>ipfs init</code> </p><ol start="4"><li>保存在本地ipfs</li></ol><p><code>ipfs add index.html</code></p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3ay3cp0j30w0070abd.jpg" alt="image-20190926182126347" style="zoom:50%;"><ol start="5"><li>同步到网络中</li></ol><a id="more"></a><p><code>ipfs daemon</code></p><blockquote><p>注意链接的格式：<a href="https://ipfs.io/ipfs/QmT78zSuBmuS4z925WZfrqQ1qHaJ56DQaTfyMUF7F8ff5o" target="_blank" rel="noopener">https://ipfs.io/ipfs/QmT78zSuBmuS4z925WZfrqQ1qHaJ56DQaTfyMUF7F8ff5o</a></p></blockquote><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3e7sdxuj30pg09ugn9.jpg" alt="image-20190926182439500" style="zoom:50%;"><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3dv5yuhj31ro08a42t.jpg" alt="image-20190926182419163"></p><h4 id="3-ipfs项目"><a href="#3-ipfs项目" class="headerlink" title="3.ipfs项目"></a>3.ipfs项目</h4><ol><li>ipfs-desktop</li></ol><p><a href="https://github.com/ipfs-shipyard/ipfs-desktop" target="_blank" rel="noopener">https://github.com/ipfs-shipyard/ipfs-desktop</a></p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3i3vr9rj30tc0hodma.jpg" alt="image-20190926182825385" style="zoom:50%;"><h4 id="4-ipfs后台界面"><a href="#4-ipfs后台界面" class="headerlink" title="4. ipfs后台界面"></a>4. ipfs后台界面</h4><p><a href>localhost:5001/webui</a></p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3ksutpzj31j30u0wnf.jpg" alt="image-20190926183100234" style="zoom:50%;"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3lres70j31pd0u0dm4.jpg" alt="image-20190926183156292" style="zoom:50%;"><h4 id="5-与浏览器交互"><a href="#5-与浏览器交互" class="headerlink" title="5.与浏览器交互"></a>5.与浏览器交互</h4><ol><li><p><code>npm install -g create-react-app</code></p></li><li><p><code>create-react-app ipfs-demo</code></p></li><li><p>进入ipfs-demo文件夹，安装ipfsjs模块</p><p><code>npm install ipfs-api --save</code></p><p><code>ipfs-api</code>改名字了，改成<code>ipfs-http-client</code>了</p><p>会发现package.json文件依赖会多出ipfs-api</p></li></ol><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d67ob9n4j30o80bct9r.jpg" alt="image-20190926200206212" style="zoom:50%;"><ol start="4"><li>解决跨域，端口不一致问题</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods <span class="string">'["PUT","GET", "POST", "OPTIONS"]'</span></span><br><span class="line">ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin <span class="string">'["*"]'</span></span><br><span class="line">ipfs config --json API.HTTPHeaders.Access-Control-Allow-Credentials <span class="string">'["true"]'</span></span><br><span class="line">ipfs config --json API.HTTPHeaders.Access-Control-Allow-Headers <span class="string">'["Authorization"]'</span></span><br><span class="line">ipfs config --json API.HTTPHeaders.Access-Control-Expose-Headers <span class="string">'["Location"]'</span></span><br></pre></td></tr></table></figure><p>使用<code>ipfs config show</code>就会看到config配置多出了API配置：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d6clhnp4j30r80imdhg.jpg" alt="image-20190926200649544"></p><ol start="5"><li><p>运行react项目</p><p><code>npm start</code></p></li><li><p>修改App.js文件内容——（react必学）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">          <span class="keyword">super</span>(props);</span><br><span class="line">          <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            strHash: <span class="literal">null</span>,</span><br><span class="line">            strContent: <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            ref=<span class="string">"ipfsContent"</span></span><br><span class="line">           /&gt;</span><br><span class="line">          &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> ipfsContent = <span class="keyword">this</span>.refs.ipfsContent.value;</span><br><span class="line">            <span class="built_in">console</span>.log(ipfsContent);</span><br><span class="line">          &#125;&#125;&gt;提交到IPFS&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          &lt;p&gt;&#123;this.state.strHash&#125;&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">          &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'从ipfs读取数据。'</span>)</span><br><span class="line">           &#125;&#125;&gt;读取数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">           &lt;h1&gt;&#123;this.state.strContent&#125;&lt;/</span>h1&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>当我们在输入框中输入一个字符串时，点击<code>提交到IPFS</code>按钮，将文本框中的内容取出来打印，之后我们将这个数据上传到<code>IPFS</code>。点击<code>读取数据</code>按钮，我们也只是随便打印了一个字符串，后面需要从<code>IPFS</code>读取数据，然后将读取的数据存储到状态机变量<code>strContent</code>中并且展示出来。</p></li><li><p>导入ipfs模块并使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ipfsAPI = <span class="built_in">require</span>(<span class="string">'ipfs-api'</span>);</span><br><span class="line"><span class="keyword">const</span> ipfs = ipfsAPI(&#123;<span class="attr">host</span>: <span class="string">'localhost'</span>, <span class="attr">port</span>: <span class="string">'5001'</span>, <span class="attr">protocol</span>: <span class="string">'http'</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p>编写上传大文本字符串到IPFS的Promise函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">saveTextBlobOnIpfs = <span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> descBuffer = Buffer.from(blob, <span class="string">'utf-8'</span>);</span><br><span class="line">      ipfs.add(descBuffer).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">        resolve(response[<span class="number">0</span>].hash);</span><br><span class="line">      &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>response[0].hash</code>返回的是数据上传到<code>IPFS</code>后返回的<code>HASH</code>字符串。</p></li><li><p>上传数据到IPFS</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.saveTextBlobOnIpfs(ipfsContent).then(<span class="function">(<span class="params">hash</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(hash);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">strHash</span>: hash&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>ipfsContent</code>是从文本框中取到的数据，调用<code>this.saveTextBlobOnIpfs</code>方法将数据上传后，会返回字符串<code>hash</code>，并且将<code>hash</code>存储到状态机变量<code>strHash</code>中。</p></li><li><p>提交数据的完整代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ipfsAPI = <span class="built_in">require</span>(<span class="string">'ipfs-api'</span>);</span><br><span class="line"><span class="keyword">const</span> ipfs = ipfsAPI(&#123;<span class="attr">host</span>: <span class="string">'localhost'</span>, <span class="attr">port</span>: <span class="string">'5001'</span>, <span class="attr">protocol</span>: <span class="string">'http'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      strHash: <span class="literal">null</span>,</span><br><span class="line">      strContent: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  saveTextBlobOnIpfs = <span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> descBuffer = Buffer.from(blob, <span class="string">'utf-8'</span>);</span><br><span class="line">      ipfs.add(descBuffer).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">        resolve(response[<span class="number">0</span>].hash);</span><br><span class="line">      &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;div className="App"&gt;</span><br><span class="line">      &lt;input ref="ipfsContent" /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">          let ipfsContent = this.refs.ipfsContent.value;</span><br><span class="line">          console.log(ipfsContent);</span><br><span class="line">          this.saveTextBlobOnIpfs(ipfsContent).then((hash) =&gt; &#123;</span><br><span class="line">            console.log(hash);</span><br><span class="line">            this.setState(&#123;strHash: hash&#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;&#125;&gt;提交到IPFS&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;&#123;this.state.strHash&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">          console.log('从ipfs读取数据。')</span><br><span class="line">        &#125;&#125;&gt;读取数据&lt;/button&gt;</span><br><span class="line">      &lt;h1&gt;&#123;this.state.strContent&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure></li><li><p>刷新网页看后台数据</p></li><li><p>从ipfs读取数据</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ipfs.cat(<span class="keyword">this</span>.state.strHash).then(<span class="function">(<span class="params">stream</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(stream);</span><br><span class="line">    <span class="keyword">let</span> strContent = Utf8ArrayToStr(stream);</span><br><span class="line">    <span class="built_in">console</span>.log(strContent);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">strContent</span>: strContent&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>stream</code>为<code>Uint8Array</code>类型的数据，下面的方法是将<code>Uint8Array</code>转换为<code>string</code>字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Utf8ArrayToStr</span><span class="params">(array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> out, i, len, c;</span><br><span class="line">    <span class="keyword">var</span> char2, char3;</span><br><span class="line"></span><br><span class="line">    out = <span class="string">""</span>;</span><br><span class="line">    len = <span class="keyword">array</span>.length;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; len) &#123;</span><br><span class="line">    c = <span class="keyword">array</span>[i++];</span><br><span class="line">    <span class="keyword">switch</span>(c &gt;&gt; <span class="number">4</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">          <span class="comment">// 0xxxxxxx</span></span><br><span class="line">          out += String.fromCharCode(c);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>: <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">          <span class="comment">// 110x xxxx   10xx xxxx</span></span><br><span class="line">          char2 = <span class="keyword">array</span>[i++];</span><br><span class="line">          out += String.fromCharCode(((c &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>) | (char2 &amp; <span class="number">0x3F</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">          <span class="comment">// 1110 xxxx  10xx xxxx  10xx xxxx</span></span><br><span class="line">          char2 = <span class="keyword">array</span>[i++];</span><br><span class="line">          char3 = <span class="keyword">array</span>[i++];</span><br><span class="line">          out += String.fromCharCode(((c &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">12</span>) |</span><br><span class="line">                         ((char2 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>) |</span><br><span class="line">                         ((char3 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">0</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="13"><li>完整源码</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ipfsAPI = <span class="built_in">require</span>(<span class="string">'ipfs-api'</span>);</span><br><span class="line"><span class="keyword">const</span> ipfs = ipfsAPI(&#123;<span class="attr">host</span>: <span class="string">'localhost'</span>, <span class="attr">port</span>: <span class="string">'5001'</span>, <span class="attr">protocol</span>: <span class="string">'http'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Utf8ArrayToStr</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> out,</span><br><span class="line">    I,</span><br><span class="line">    len,</span><br><span class="line">    c;</span><br><span class="line">  <span class="keyword">var</span> char2,</span><br><span class="line">    char3;</span><br><span class="line"></span><br><span class="line">  out = <span class="string">""</span>;</span><br><span class="line">  len = array.length;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">    c = array[i++];</span><br><span class="line">    <span class="keyword">switch</span> (c &gt;&gt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="comment">// 0xxxxxxx</span></span><br><span class="line">        out += <span class="built_in">String</span>.fromCharCode(c);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">        <span class="comment">// 110x xxxx   10xx xxxx</span></span><br><span class="line">        char2 = array[i++];</span><br><span class="line">        out += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>) | (char2 &amp; <span class="number">0x3F</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">        <span class="comment">// 1110 xxxx  10xx xxxx  10xx xxxx</span></span><br><span class="line">        char2 = array[i++];</span><br><span class="line">        char3 = array[i++];</span><br><span class="line">        out += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">12</span>) | ((char2 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>) | ((char3 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      strHash: <span class="literal">null</span>,</span><br><span class="line">      strContent: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  saveTextBlobOnIpfs = <span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> descBuffer = Buffer.from(blob, <span class="string">'utf-8'</span>);</span><br><span class="line">      ipfs.add(descBuffer).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">        resolve(response[<span class="number">0</span>].hash);</span><br><span class="line">      &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;div className="App"&gt;</span><br><span class="line">      &lt;input ref="ipfsContent" /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">          let ipfsContent = this.refs.ipfsContent.value;</span><br><span class="line">          console.log(ipfsContent);</span><br><span class="line">          this.saveTextBlobOnIpfs(ipfsContent).then((hash) =&gt; &#123;</span><br><span class="line">            console.log(hash);</span><br><span class="line">            this.setState(&#123;strHash: hash&#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;&#125;&gt;提交到IPFS&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;&#123;this.state.strHash&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">          console.log('从ipfs读取数据。')</span><br><span class="line">          ipfs.cat(this.state.strHash).then((stream) =&gt; &#123;</span><br><span class="line">            console.log(stream);</span><br><span class="line">            let strContent = Utf8ArrayToStr(stream);</span><br><span class="line">            console.log(strContent);</span><br><span class="line">            this.setState(&#123;strContent: strContent&#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;&#125;&gt;读取数据&lt;/button&gt;</span><br><span class="line">      &lt;h1&gt;&#123;this.state.strContent&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><ol start="14"><li>预览结果</li></ol><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d796adhcj31pl0u0qah.jpg" alt="image-20190926203811361"></p>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ipfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode debug</title>
      <link href="/2019/09/17/vscode_debug/"/>
      <url>/2019/09/17/vscode_debug/</url>
      
        <content type="html"><![CDATA[<h4 id="1、为什么需要调试"><a href="#1、为什么需要调试" class="headerlink" title="1、为什么需要调试"></a>1、为什么需要调试</h4><p>写了很多行代码，但是有时候运行的时候遇到了未知的错误，不知道错在哪，有时候错误是某个参数未定义，path找不到等等，这个时候我们就怀疑是值未传递到设置好的参数内，所以可以使用输出语句，但是懂调试的话是写程序的一大利器，且效率极高。</p><p>还有就是console.log这种语句写够了！</p><p>最近一直用vscode写后端和前端，一直在接触nodejs语言，但是一直都不怎么了解vscode的调试，所以决心来学习一下。</p><a id="more"></a><h4 id="2、vscode如何调试"><a href="#2、vscode如何调试" class="headerlink" title="2、vscode如何调试"></a>2、vscode如何调试</h4><p>VScode除了支持JavaScript和TypeScript，还支持Node.js调试，简直就是为前端工程师而生的。</p><h5 id="2-1-先下载一下express模板项目"><a href="#2-1-先下载一下express模板项目" class="headerlink" title="2.1. 先下载一下express模板项目"></a>2.1. 先下载一下express模板项目</h5><ol><li><code>npm install express-generator -g</code></li><li><code>express -v</code> 查看版本</li><li><code>express myapp</code></li><li><code>cd myapp &amp;&amp; npm install</code></li><li><code>npm start</code></li></ol><h5 id="2-2-启动程序后进入vscode主界面"><a href="#2-2-启动程序后进入vscode主界面" class="headerlink" title="2.2 启动程序后进入vscode主界面"></a>2.2 启动程序后进入vscode主界面</h5><ol><li>F5选择nodejs环境，会生成launch.json配置文件</li></ol><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73r2l1khhj312r0j7mzt.jpg" alt="https://tva1.sinaimg.cn/large/006y8mN6ly1g73r2l1khhj312r0j7mzt.jpg"></p><p>其中最重要的配置项就是“Program”字段，这个字段定义了整个应用的入口，开启调试器的时候会从这个入口启动应用。</p><p>查看<code>package.json</code>中是否有包含了键名为<code>start</code>的<code>scripts</code>，如果有的话，就会把start配置的内容作为“program”字段的值。</p><ol start="2"><li>点击绿色三角形，就可以开始调试。</li></ol><p>这时界面上方就会出现一个调试控制的面板，页面右下方会出现一个调试控制台，可以查看你输出的信息，在界面下放会出现一个状态栏，当前的橘黄色表示应用在正常运行</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73r5owvr2j30v3075dgu.jpg" alt="https://tva1.sinaimg.cn/large/006y8mN6ly1g73r5owvr2j30v3075dgu.jpg"></p><ol start="3"><li>设置断点</li></ol><p>设置完断点之后，重新启动调试，然后在浏览器中访问localhost:3000，这时候，断点的形状发生了变化，程序停留在了断点，调试控制面板的按钮也发生了变化</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73rb2ffgmj30yj0e4tat.jpg" alt="https://tva1.sinaimg.cn/large/006y8mN6ly1g73rb2ffgmj30yj0e4tat.jpg"></p><p>从左到右依次是</p><p><strong>单步跳过</strong></p><p><strong>单步调试</strong></p><p><strong>单步跳出</strong></p><p><strong>重启</strong></p><p><strong>停止调试</strong></p><p>这几个都是常见的断点调试指令。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73re1ak3cj31n40epad3.jpg" alt="https://tva1.sinaimg.cn/large/006y8mN6ly1g73re1ak3cj31n40epad3.jpg"></p><h5 id="2-3-调式技巧"><a href="#2-3-调式技巧" class="headerlink" title="2.3 调式技巧"></a>2.3 调式技巧</h5><ol><li>将鼠标防止在断点前的变量或者参数上，也可以查看该变量当前的数值，体验与Chrome开发者工具的调试一致。</li></ol><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73rg7aib3j318k0n278q.jpg" alt="https://tva1.sinaimg.cn/large/006y8mN6ly1g73rg7aib3j318k0n278q.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技巧</title>
      <link href="/2019/09/17/2019%E5%B9%B409%E6%9C%8818%E6%97%A5%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/09/17/2019%E5%B9%B409%E6%9C%8818%E6%97%A5%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="1、实现chrome全浏览器截图"><a href="#1、实现chrome全浏览器截图" class="headerlink" title="1、实现chrome全浏览器截图"></a>1、实现chrome全浏览器截图</h3><ul><li>右键检查元素</li><li>（mac）win+shift+P</li><li>screen</li><li>full node screen</li><li>保存下图片</li></ul><h3 id="2、word消除所有空行"><a href="#2、word消除所有空行" class="headerlink" title="2、word消除所有空行"></a>2、word消除所有空行</h3><ul><li>选择替换功能</li><li>^p^p替换成^p</li><li>循环多次可实现</li></ul><a id="more"></a><h3 id="3、如何初始化git并且将一些文化忽略掉"><a href="#3、如何初始化git并且将一些文化忽略掉" class="headerlink" title="3、如何初始化git并且将一些文化忽略掉"></a>3、如何初始化git并且将一些文化忽略掉</h3><ul><li>git init</li><li>新建.gitignore</li><li>将文件夹名称写进去</li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g75uiuueu5j318a0au42f.jpg" alt="https://tva1.sinaimg.cn/large/006y8mN6ly1g75uiuueu5j318a0au42f.jpg"></p><h3 id="4-配置vscode与终端结合，终端code-进入vscode"><a href="#4-配置vscode与终端结合，终端code-进入vscode" class="headerlink" title="4.配置vscode与终端结合，终端code .进入vscode"></a>4.配置vscode与终端结合，终端code .进入vscode</h3><ul><li><p>打开vscode，shift+command+p</p></li><li><p>输入shell command</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3uawshbj30k002tgm2.jpg" alt="image-20190926184008885"></p></li><li><p>终端进入想要使用的文件夹，输入<code>code .</code>，便打开了vscode</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法说明</title>
      <link href="/2018/12/26/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/12/26/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>markdown语法说明<br>2018年12月26日09:55:41<br>62 篇   </p></blockquote><h3 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h3><p>Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。  </p><p>Markdown也可以理解为将以MARKDOWN语言编写的语言转换成HTML内容的工具，最初是一个perl脚本Markdown.pl。  </p><p>下面正文，Markdown语法主要分为如下几大部分：  </p><p><b>标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’。</b>  </p><a id="more"></a><hr><h3 id="1-基本"><a href="#1-基本" class="headerlink" title="1. 基本"></a>1. 基本</h3><ol><li>标题——使用#，可表示1-6级标题。  </li></ol><p>#一级标题  </p><p>##二级标题  </p><p>###三级标题  </p><p>####四级标题  </p><p>#####五级标题  </p><p>######六级标题  </p><p>效果：  </p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><ol start="2"><li>段落  </li></ol><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。  </p><ol start="3"><li>区块引用  </li></ol><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：  </p><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p><p>效果：  </p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用  </p></blockquote></blockquote><ol start="4"><li>代码区块  </li></ol><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如  </p><p>普通段落：<br>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}  </p><p>代码区块：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello, Markdown."</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​     </p><ol start="5"><li>强调  </li></ol><p>在强调内容两侧分别加上*或者_，如：  </p><p>*斜体*，_斜体_  </p><p>**粗体**，__粗体__  </p><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em>  </p></blockquote><blockquote><p><strong>粗体</strong>，<strong>粗体</strong>  </p></blockquote><ol start="6"><li>列表  </li></ol><p>使用·、+、或-标记无序列表，如：  </p><p>-（+<em>） 第一项 -（+</em>） 第二项 - （+*）第三项</p><p>注意：标记后面最少有一个空格或制表符。若不在引用区块中，必须和前方段落之间存在空行。  </p><p>效果：  </p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以.，如：  </p><p>1.第一项<br>2.第二项<br>3.第三项  </p><p>效果：  </p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><ol start="7"><li>分割线  </li></ol><p>分割线最常使用就是三个或以上*，还可以使用-和_。  </p><hr><ol start="8"><li>反斜杠\  </li></ol><p>相当于反转义作用。使符号成为普通符号。  </p><ol start="9"><li>符号’`’  </li></ol><p>起到标记作用。如：</p><p>`ctrl+a`  </p><p>效果：  </p><blockquote><p><code>ctrl+a</code>  </p></blockquote><h3 id="2-高级"><a href="#2-高级" class="headerlink" title="2. 高级"></a>2. 高级</h3><p>1.空格  &amp;emsp；</p><p>2.换行  &lt;br&gt;</p><p>3.代码  ‘’’   Text ‘’’</p><p>4.删除线   <del>~   text ~</del></p><p>5.加粗    &lt;b&gt;  text  &lt;/b&gt;</p><p>6.网页链接    ctrl+L</p><ol start="7"><li>插入图片，调整大小   </li></ol><img src width="300" hegiht="600" align="center">  <hr><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术指令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类 &amp; 标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="正在做-gt"><a href="#正在做-gt" class="headerlink" title="正在做&gt;"></a>正在做&gt;</h2><p>读研</p><h2 id="兴趣爱好-gt"><a href="#兴趣爱好-gt" class="headerlink" title="兴趣爱好&gt;"></a>兴趣爱好&gt;</h2><ul><li>爱运动</li><li>爱旅游</li><li>爱唱歌</li></ul>]]></content>
      
    </entry>
    
    
  
</search>
