<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>以太坊dapp开发篇3-工程创建及合约交互</title>
      <link href="/2019/11/11/%E5%B7%A5%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%90%88%E7%BA%A6%E4%BA%A4%E4%BA%92-03/"/>
      <url>/2019/11/11/%E5%B7%A5%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%90%88%E7%BA%A6%E4%BA%A4%E4%BA%92-03/</url>
      
        <content type="html"><![CDATA[<h1 id="1-工程创建"><a href="#1-工程创建" class="headerlink" title="1.工程创建"></a>1.工程创建</h1><h3 id="1-1-环境准备"><a href="#1-1-环境准备" class="headerlink" title="1.1 环境准备"></a>1.1 环境准备</h3><p>之前我们已经下载了nodejs开发环境，nodejs自带npm工具，npm相当于一个包管理器。我们使用npm命令下载安装一个构建<code>React</code>单页面应用的脚手架工具<code>create-react-app</code>。</p><p><code>npm install -g create-react-app</code></p><p>接着我们创建一个空的项目</p><p><code>create-react-app lottery-xiaoye-github</code></p><a id="more"></a><p>创建成功后，我们可以看一下目录结构：</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8u3a0dnjsj309h0cxq3g.jpg" alt="image-20191111143533476" style="zoom: 67%;"><p>我们先试试可不可以正常启动，在vscode终端中进入该项目中，输入命令：<code>npm run start</code></p><p>正常启动后，终端界面是以下界面：</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8u3gbbuvkj30jb05qmxi.jpg" alt="image-20191111144140372" style="zoom: 67%;"><p>启动后，会自动跳转到浏览器的<code>localhost:3000</code>页面，如下所示。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8u3h8r6t2j31us0rm40m.jpg" alt="image-20191111144233138" style="zoom: 25%;"><h3 id="1-2-项目依赖安装"><a href="#1-2-项目依赖安装" class="headerlink" title="1.2 项目依赖安装"></a>1.2 项目依赖安装</h3><p>我们需要安装以下依赖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"semantic-ui-css"</span>: <span class="string">"^2.4.1"</span>,</span><br><span class="line"><span class="string">"semantic-ui-react"</span>: <span class="string">"^0.83.0"</span>,</span><br><span class="line"><span class="string">"solc"</span>: <span class="string">"^0.4.25"</span>,</span><br><span class="line"><span class="string">"truffle-hdwallet-provider"</span>: <span class="string">"0.0.3"</span>,</span><br><span class="line"><span class="string">"web3"</span>: <span class="string">"^1.0.0-beta.36"</span></span><br></pre></td></tr></table></figure><p>分别介绍一下这些依赖。</p><ol><li><code>semantic-ui-css</code> :负责界面样式</li><li><code>semantic-ui-react</code> :负责ui的界面组件库</li><li><code>solc</code> :负责编译合约的模块</li><li><code>truffle-hdwallet-provider</code> :<code>infura</code>托管以太坊节点可以通过<code>HDWalletProvider</code>来签署交易</li><li><code>web3</code> :负责界面与合约交互的模块</li></ol><blockquote><p>Infura是一个托管的以太坊节点集群，可以将你开发的以太坊智能合约部署到infura提供的节点上，而无需搭建自己的以太坊节点。它是MetaMask背后的以太坊供应商。</p></blockquote><p>安装这些依赖有两种方法，一种是通过<code>npm install xxx@0.1</code>命令依次安装，另一种更加简便，就是在<code>package.json</code>文件中如下图：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8wc4s01q2j30en07x0tc.jpg" alt="image-20191113131306010"></p><p>在<code>dependencies</code>中添加之前的几行依赖，最后如下图所示：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8wc6dykxuj30dv0buwg0.jpg" alt="image-20191113131438985"></p><p>接着我们需要在终端中输入：</p><p><code>npm install</code></p><p>该命令是安装模块依赖的命令，项目首先会扫描<code>package.json</code>中的依赖，若没有安装则会进行全部安装。安装这些需要等待大约10分钟左右。</p><blockquote><p>注意，依赖的版本严格按照上述的版本，否则会出现bug或者不可解决的问题。</p></blockquote><h3 id="1-3-清理工程"><a href="#1-3-清理工程" class="headerlink" title="1.3 清理工程"></a>1.3 清理工程</h3><ol><li>进入src目录，除了App.js和index.js，删除掉其他文件</li><li>在其他文件中删掉对删除文件的引用代码</li><li>删掉App.js中render函数渲染的内容</li></ol><p>最后，清理成功后，可以看到以下文件中只剩这些代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">   &lt;h1&gt;hello 要开始彩票dapp咯&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/index.js</span></span><br><span class="line"><span class="regexp">import React from 'react';</span></span><br><span class="line"><span class="regexp">import ReactDOM from 'react-dom';</span></span><br><span class="line"><span class="regexp">import App from './</span>App<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ReactDOM.render(&lt;App /&gt;, document.getElementById('</span>root<span class="string">'));</span></span><br></pre></td></tr></table></figure><p>再次运行<code>npm run start</code></p><p>可以看到网页会呈现这个界面：</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8wckngo40j30n403iglp.jpg" alt="image-20191113132815431" style="zoom:33%;"><h1 id="2-合约编译部署"><a href="#2-合约编译部署" class="headerlink" title="2.合约编译部署"></a>2.合约编译部署</h1><h3 id="2-1-合约编译"><a href="#2-1-合约编译" class="headerlink" title="2.1 合约编译"></a>2.1 合约编译</h3><p>我们在项目中新建<code>contracts</code>文件夹，接着在该文件夹新建<code>Lottery.sol</code>。我们把上章写的合约代码全部拷贝进去。</p><p>接着我们在项目主目录中新建<code>01-compile.js</code>文件，该文件主要负责的功能就是编译合约，检查合约有没有出错。</p><p><code>01-compile.js</code>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入solc编译器</span></span><br><span class="line"><span class="keyword">let</span> solc = <span class="built_in">require</span>(<span class="string">'solc'</span>) <span class="comment">//0.4.25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入文件读取模块</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取项目中的Lottery合约</span></span><br><span class="line"><span class="keyword">let</span> sourceCode = fs.readFileSync(<span class="string">'./contracts/Lottery.sol'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译</span></span><br><span class="line"><span class="keyword">let</span> output = solc.compile(sourceCode, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出编译结果</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'output :'</span>, output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据map的key值，导出编译好的[：Lottery]这部分代码</span></span><br><span class="line"><span class="built_in">module</span>.exports = output[<span class="string">'contracts'</span>][<span class="string">':Lottery'</span>]</span><br></pre></td></tr></table></figure><p>在终端使用node命令，运行<code>01-compile.js</code>文件。</p><p><code>node 01-compile.js</code></p><p>我们可以看到一下输出结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ryks-MacBook-Pro-<span class="number">4</span>:lottery-xiaoye-github apple$ node <span class="number">01</span>-compile.js </span><br><span class="line">output : &#123; contracts:</span><br><span class="line">   &#123; ':Lottery':</span><br><span class="line">      &#123; assembly: [Object],</span><br><span class="line"><span class="function">        bytecode:</span></span><br><span class="line"><span class="function">         '608060405234801561001057600080<span class="title">fd5b5060008054600160a060020a031916331790556105bb806100326000396000f3006080604052600436106100a35763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c4e46ac81146100a857806312065fe0146100bf578063146ca531146100e6578063481c6a75146100fb5780636c31e2ea1461012c5780638b5b9ccc1461014157806393e84cd9146101a6578063a76594bf146101ae578063dfbf53ae146101c3578063f71d96cb146101d8575b600080fd5b3480156100b457600080fd5b506100bd6101f0565b005b3480156100cb57600080fd5b506100d461028a565b60408051918252519081900360200190f35b3480156100f257600080fd5b506100d4610290565b34801561010757600080fd5b50610110610296565b60408051600160a060020a039092168252519081900360200190f35b34801561013857600080fd5b506100bd6102a5565b34801561014d57600080fd5b50610156610455565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561019257818101518382015260200161017a565b505050509050019250505060405180910390f35b6100bd6104b7565b3480156101ba57600080fd5b506100d461051b565b3480156101cf57600080fd5b50610110610521565b3480156101e457600080fd5b50610110600435610530565b60008054600160a060020a0316331461020857600080fd5b5060005b60015481101561027057600180548290811061022457fe5b6000918252602082200154604051600160a060020a039091169190670de0b6b3a76400009082818181858883f19350505050158015610267573d6000803e3d6000fd5b5060010161020c565b600280546001908101909155610287906000610558565b50565b30315b90565b60025481565b600054600160a060020a031681565b60008054606091908190819081908190600160a060020a031633146102c957600080fd5b42446001805490506040516020018084815260200183815260200182815260200193505050506040516020818303038152906040529550856040518082805190602001908083835b602083106103305780518252601f199092019160209182019101610311565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912060015490985088975092508691505081151561037157fe5b06925060018381548110151561038357fe5b600091825260208220015460038054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff1990911617908190556040516064308031605a029190910496503186900394509116916108fc851502918591818181858888f193505050501580156103fb573d6000803e3d6000fd5b5060008054604051600160a060020a039091169183156108fc02918491818181858888f19350505050158015610435573d6000803e3d6000fd5b5060028054600190810190915561044d906000610558565b505050505050565b606060018054806020026020016040519081016040528092919081815260200182805480156104ad57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161048f575b5050505050905090565b670de0b6b3a764000034146104cb57600080fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805473ffffffffffffffffffffffffffffffffffffffff191633179055565b60015490565b600354600160a060020a031681565b600180548290811061053e57fe5b600091825260209091200154600160a060020a0316905081565b5080546000825590600052602060002090810190610287919061028d91905b8082111561058b5760008155600101610577565b50905600a165627a7a72305820f265121fe8433d23ba63b4d7c15048b2ccfac98765bb60e9fff048e5418417300029</span>',</span></span><br><span class="line"><span class="function">        <span class="title">functionHashes</span>: [<span class="title">Object</span>],</span></span><br><span class="line"><span class="function">        <span class="title">gasEstimates</span>: [<span class="title">Object</span>],</span></span><br><span class="line"><span class="function">        <span class="title">interface</span>:</span></span><br><span class="line"><span class="function">         '[&#123;"<span class="title">constant</span>":<span class="title">false</span>,"<span class="title">inputs</span>":[],"<span class="title">name</span>":"<span class="title">tuiJiang</span>","<span class="title">outputs</span>":[],"<span class="title">payable</span>":<span class="title">false</span>,"<span class="title">stateMutability</span>":"<span class="title">nonpayable</span>","<span class="title">type</span>":"<span class="title">function</span>"&#125;,&#123;"<span class="title">constant</span>":<span class="title">true</span>,"<span class="title">inputs</span>":[],"<span class="title">name</span>":"<span class="title">getBalance</span>","<span class="title">outputs</span>":[&#123;"<span class="title">name</span>":"","<span class="title">type</span>":"<span class="title">uint256</span>"&#125;],"<span class="title">payable</span>":<span class="title">false</span>,"<span class="title">stateMutability</span>":"<span class="title">view</span>","<span class="title">type</span>":"<span class="title">function</span>"&#125;,&#123;"<span class="title">constant</span>":<span class="title">true</span>,"<span class="title">inputs</span>":[],"<span class="title">name</span>":"<span class="title">round</span>","<span class="title">outputs</span>":[&#123;"<span class="title">name</span>":"","<span class="title">type</span>":"<span class="title">uint256</span>"&#125;],"<span class="title">payable</span>":<span class="title">false</span>,"<span class="title">stateMutability</span>":"<span class="title">view</span>","<span class="title">type</span>":"<span class="title">function</span>"&#125;,&#123;"<span class="title">constant</span>":<span class="title">true</span>,"<span class="title">inputs</span>":[],"<span class="title">name</span>":"<span class="title">manager</span>","<span class="title">outputs</span>":[&#123;"<span class="title">name</span>":"","<span class="title">type</span>":"<span class="title">address</span>"&#125;],"<span class="title">payable</span>":<span class="title">false</span>,"<span class="title">stateMutability</span>":"<span class="title">view</span>","<span class="title">type</span>":"<span class="title">function</span>"&#125;,&#123;"<span class="title">constant</span>":<span class="title">false</span>,"<span class="title">inputs</span>":[],"<span class="title">name</span>":"<span class="title">kaiJiang</span>","<span class="title">outputs</span>":[],"<span class="title">payable</span>":<span class="title">false</span>,"<span class="title">stateMutability</span>":"<span class="title">nonpayable</span>","<span class="title">type</span>":"<span class="title">function</span>"&#125;,&#123;"<span class="title">constant</span>":<span class="title">true</span>,"<span class="title">inputs</span>":[],"<span class="title">name</span>":"<span class="title">getPlayers</span>","<span class="title">outputs</span>":[&#123;"<span class="title">name</span>":"","<span class="title">type</span>":"<span class="title">address</span>[]"&#125;],"<span class="title">payable</span>":<span class="title">false</span>,"<span class="title">stateMutability</span>":"<span class="title">view</span>","<span class="title">type</span>":"<span class="title">function</span>"&#125;,&#123;"<span class="title">constant</span>":<span class="title">false</span>,"<span class="title">inputs</span>":[],"<span class="title">name</span>":"<span class="title">play</span>","<span class="title">outputs</span>":[],"<span class="title">payable</span>":<span class="title">true</span>,"<span class="title">stateMutability</span>":"<span class="title">payable</span>","<span class="title">type</span>":"<span class="title">function</span>"&#125;,&#123;"<span class="title">constant</span>":<span class="title">true</span>,"<span class="title">inputs</span>":[],"<span class="title">name</span>":"<span class="title">getPlayersCount</span>","<span class="title">outputs</span>":[&#123;"<span class="title">name</span>":"","<span class="title">type</span>":"<span class="title">uint256</span>"&#125;],"<span class="title">payable</span>":<span class="title">false</span>,"<span class="title">stateMutability</span>":"<span class="title">view</span>","<span class="title">type</span>":"<span class="title">function</span>"&#125;,&#123;"<span class="title">constant</span>":<span class="title">true</span>,"<span class="title">inputs</span>":[],"<span class="title">name</span>":"<span class="title">winner</span>","<span class="title">outputs</span>":[&#123;"<span class="title">name</span>":"","<span class="title">type</span>":"<span class="title">address</span>"&#125;],"<span class="title">payable</span>":<span class="title">false</span>,"<span class="title">stateMutability</span>":"<span class="title">view</span>","<span class="title">type</span>":"<span class="title">function</span>"&#125;,&#123;"<span class="title">constant</span>":<span class="title">true</span>,"<span class="title">inputs</span>":[&#123;"<span class="title">name</span>":"","<span class="title">type</span>":"<span class="title">uint256</span>"&#125;],"<span class="title">name</span>":"<span class="title">players</span>","<span class="title">outputs</span>":[&#123;"<span class="title">name</span>":"","<span class="title">type</span>":"<span class="title">address</span>"&#125;],"<span class="title">payable</span>":<span class="title">false</span>,"<span class="title">stateMutability</span>":"<span class="title">view</span>","<span class="title">type</span>":"<span class="title">function</span>"&#125;,&#123;"<span class="title">inputs</span>":[],"<span class="title">payable</span>":<span class="title">false</span>,"<span class="title">stateMutability</span>":"<span class="title">nonpayable</span>","<span class="title">type</span>":"<span class="title">constructor</span>"&#125;]',</span></span><br><span class="line"><span class="function">       .......</span></span><br></pre></td></tr></table></figure><h3 id="2-2-合约部署"><a href="#2-2-合约部署" class="headerlink" title="2.2  合约部署"></a>2.2  合约部署</h3><p>因为想着大家都可以查询到该dapp所产生的交易，所以在这个项目中均使用到了以太坊测试网络中节点。我们在<code>infura</code>网站中注册了一个以太坊节点</p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8wd9hn1ofj31y00t6aez.jpg" alt="image-20191113135210605" style="zoom:33%;"><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8wdgieculj316u0g83zw.jpg" alt="image-20191113135858234"></p><blockquote><p>infura网站注册自己自行搜索。</p></blockquote><p>接着我们在主目录中新建<code>02-deploy.js</code>，该文件功能主要是部署合约,得到部署后的地址。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;bytecode, interface&#125; = <span class="built_in">require</span>(<span class="string">'./01-compile'</span>)</span><br><span class="line"><span class="keyword">let</span> HDWalletProvider = <span class="built_in">require</span>(<span class="string">"truffle-hdwallet-provider"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(bytecode)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(interface)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 引⼊web3</span></span><br><span class="line"><span class="keyword">let</span> Web3 = <span class="built_in">require</span>(<span class="string">'web3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. new ⼀个web3实例</span></span><br><span class="line"><span class="keyword">let</span> web3 = <span class="keyword">new</span> Web3()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 设置⽹络</span></span><br><span class="line"><span class="keyword">let</span> mnemonic1 = <span class="string">"助记词"</span></span><br><span class="line"><span class="keyword">let</span> netIp = <span class="string">"https://ropsten.infura.io/v3/xxxx"</span></span><br><span class="line"><span class="keyword">let</span> provider = <span class="keyword">new</span> HDWalletProvider(mnemonic1, netIp)</span><br><span class="line"></span><br><span class="line">web3.setProvider(provider)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// web3.setProvider('HTTP://127.0.0.1:8545')</span></span><br><span class="line"><span class="comment">//account是ganache第⼀个账户的地址</span></span><br><span class="line"><span class="comment">//const account = '0x3211B6a9fc5ea8bEf649bb617E3123a5755A0aC1'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'version :'</span>, web3.version)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 拼接合约数据 interface</span></span><br><span class="line"><span class="keyword">let</span> contract = <span class="keyword">new</span> web3.eth.Contract(<span class="built_in">JSON</span>.parse(interface))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> deploy = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">//1. 现获取所有的账户</span></span><br><span class="line">    <span class="keyword">let</span> accounts = <span class="keyword">await</span> web3.eth.getAccounts()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'accounts :'</span>, accounts)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行部署</span></span><br><span class="line">    <span class="keyword">let</span> instance = <span class="keyword">await</span> contract.deploy(&#123;</span><br><span class="line">        data: bytecode, <span class="comment">//合约的bytecode</span></span><br><span class="line">        <span class="comment">// arguments: ['HelloWorld'] //给构造函数传递参数，使用数组</span></span><br><span class="line">    &#125;).send(&#123;</span><br><span class="line">        <span class="keyword">from</span>: accounts[<span class="number">0</span>],</span><br><span class="line">        gas: <span class="string">'3000000'</span>, <span class="comment">//不要用默认值，一定要写大一些， 要使用单引号</span></span><br><span class="line">        <span class="comment">//gasPrice: '1',</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'instance address :'</span>, instance.options.address)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deploy()</span><br></pre></td></tr></table></figure><p>我们可以运行该文件，等待一分钟左右可以得到部署之后的地址。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">version : <span class="number">1.2</span><span class="number">.2</span></span><br><span class="line">accounts : [ <span class="string">'0x6031B6BE1C7D8bAf484c908fcb3485c477c3870B'</span> ]</span><br><span class="line">instance address : <span class="number">0x49e21A6D5025679166E9b825090De83b1B651aB4</span></span><br></pre></td></tr></table></figure><h1 id="3-初始化web3及合约实例生成"><a href="#3-初始化web3及合约实例生成" class="headerlink" title="3.初始化web3及合约实例生成"></a>3.初始化web3及合约实例生成</h1><h3 id="3-1-web3初始化"><a href="#3-1-web3初始化" class="headerlink" title="3.1 web3初始化"></a>3.1 web3初始化</h3><p>我们在src目录下新建以下文件夹和文件</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8we0dc4mlj309c05hdfy.jpg" alt="image-20191113141750072"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── App.js</span><br><span class="line">├── display</span><br><span class="line">│   └── ui.js    //ui界面呈现</span><br><span class="line">├── eth</span><br><span class="line">│   └── lotteryInstance.js    //合约实例生成</span><br><span class="line">├── index.js</span><br><span class="line">└── utils</span><br><span class="line">    └── initWeb3.js     //web3初始化</span><br></pre></td></tr></table></figure><p>我们在<code>initWeb3.js</code>中编写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//initWeb3.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 引入web3</span></span><br><span class="line"><span class="keyword">let</span> Web3 = <span class="built_in">require</span>(<span class="string">'web3'</span>) <span class="comment">//1.0版本</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'window web3 :'</span>, <span class="built_in">window</span>.web3.version) <span class="comment">//0.20版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. new 一个web3实例</span></span><br><span class="line"><span class="keyword">let</span> web3 = <span class="keyword">new</span> Web3()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 设置网络</span></span><br><span class="line"><span class="comment">//使用用户自己的provider来填充web3</span></span><br><span class="line">web3.setProvider(<span class="built_in">window</span>.web3.currentProvider)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我们的 web3 :'</span>, web3.version)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = web3</span><br></pre></td></tr></table></figure><p>并且我们把初始化的web3模块导入到App.js中，可以检查代码是否错误。</p><p><code>let web3 = require(&#39;./utils/initWeb3&#39;)</code></p><p>启动项目后，在浏览器console中会有如下输出，如下图所示：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8we63zv8sj31lc0bgadi.jpg" alt="image-20191113142333946"></p><h3 id="3-2-合约实例生成"><a href="#3-2-合约实例生成" class="headerlink" title="3.2  合约实例生成"></a>3.2  合约实例生成</h3><p>合约实例生成需要两个关键元素，一个是上节中合约部署成功后取到的合约地址，另一个就是合约编译后生成的ABI代码。</p><p><strong>如何获取到ABI呢？</strong></p><p>我们需要登录remix网站，编译成功后都会有个ABI按钮，点击一下就会完成复制ABI代码操作。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8weff2dx0j30jq0xcgon.jpg" alt="image-20191113143229191" style="zoom:33%;"><p>接着我们在<code>lotteryInstance.js</code>文件中编写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> web3 = <span class="built_in">require</span>(<span class="string">'../utils/initWeb3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> abi=[ &#123; <span class="string">"constant"</span>: <span class="literal">false</span>, <span class="string">"inputs"</span>: [], <span class="string">"name"</span>: <span class="string">"kaiJiang"</span>, <span class="string">"outputs"</span>: [], <span class="string">"payable"</span>: <span class="literal">false</span>, <span class="string">"stateMutability"</span>: <span class="string">"nonpayable"</span>, <span class="string">"type"</span>: <span class="string">"function"</span> &#125;, &#123; <span class="string">"constant"</span>: <span class="literal">false</span>, <span class="string">"inputs"</span>: [], <span class="string">"name"</span>: <span class="string">"play"</span>, <span class="string">"outputs"</span>: [], <span class="string">"payable"</span>: <span class="literal">true</span>, <span class="string">"stateMutability"</span>: <span class="string">"payable"</span>, <span class="string">"type"</span>: <span class="string">"function"</span> &#125;, &#123; <span class="string">"constant"</span>: <span class="literal">false</span>, <span class="string">"inputs"</span>: [], <span class="string">"name"</span>: <span class="string">"tuiJiang"</span>, <span class="string">"outputs"</span>: [], <span class="string">"payable"</span>: <span class="literal">false</span>, <span class="string">"stateMutability"</span>: <span class="string">"nonpayable"</span>, <span class="string">"type"</span>: <span class="string">"function"</span> &#125;, &#123; <span class="string">"inputs"</span>: [], <span class="string">"payable"</span>: <span class="literal">false</span>, <span class="string">"stateMutability"</span>: <span class="string">"nonpayable"</span>, <span class="string">"type"</span>: <span class="string">"constructor"</span> &#125;, &#123; <span class="string">"constant"</span>: <span class="literal">true</span>, <span class="string">"inputs"</span>: [], <span class="string">"name"</span>: <span class="string">"getBalance"</span>, <span class="string">"outputs"</span>: [ &#123; <span class="string">"name"</span>: <span class="string">""</span>, <span class="string">"type"</span>: <span class="string">"uint256"</span> &#125; ], <span class="string">"payable"</span>: <span class="literal">false</span>, <span class="string">"stateMutability"</span>: <span class="string">"view"</span>, <span class="string">"type"</span>: <span class="string">"function"</span> &#125;, &#123; <span class="string">"constant"</span>: <span class="literal">true</span>, <span class="string">"inputs"</span>: [], <span class="string">"name"</span>: <span class="string">"getPlayers"</span>, <span class="string">"outputs"</span>: [ &#123; <span class="string">"name"</span>: <span class="string">""</span>, <span class="string">"type"</span>: <span class="string">"address[]"</span> &#125; ], <span class="string">"payable"</span>: <span class="literal">false</span>, <span class="string">"stateMutability"</span>: <span class="string">"view"</span>, <span class="string">"type"</span>: <span class="string">"function"</span> &#125;, &#123; <span class="string">"constant"</span>: <span class="literal">true</span>, <span class="string">"inputs"</span>: [], <span class="string">"name"</span>: <span class="string">"getPlayersCount"</span>, <span class="string">"outputs"</span>: [ &#123; <span class="string">"name"</span>: <span class="string">""</span>, <span class="string">"type"</span>: <span class="string">"uint256"</span> &#125; ], <span class="string">"payable"</span>: <span class="literal">false</span>, <span class="string">"stateMutability"</span>: <span class="string">"view"</span>, <span class="string">"type"</span>: <span class="string">"function"</span> &#125;, &#123; <span class="string">"constant"</span>: <span class="literal">true</span>, <span class="string">"inputs"</span>: [], <span class="string">"name"</span>: <span class="string">"manager"</span>, <span class="string">"outputs"</span>: [ &#123; <span class="string">"name"</span>: <span class="string">""</span>, <span class="string">"type"</span>: <span class="string">"address"</span> &#125; ], <span class="string">"payable"</span>: <span class="literal">false</span>, <span class="string">"stateMutability"</span>: <span class="string">"view"</span>, <span class="string">"type"</span>: <span class="string">"function"</span> &#125;, &#123; <span class="string">"constant"</span>: <span class="literal">true</span>, <span class="string">"inputs"</span>: [ &#123; <span class="string">"name"</span>: <span class="string">""</span>, <span class="string">"type"</span>: <span class="string">"uint256"</span> &#125; ], <span class="string">"name"</span>: <span class="string">"players"</span>, <span class="string">"outputs"</span>: [ &#123; <span class="string">"name"</span>: <span class="string">""</span>, <span class="string">"type"</span>: <span class="string">"address"</span> &#125; ], <span class="string">"payable"</span>: <span class="literal">false</span>, <span class="string">"stateMutability"</span>: <span class="string">"view"</span>, <span class="string">"type"</span>: <span class="string">"function"</span> &#125;, &#123; <span class="string">"constant"</span>: <span class="literal">true</span>, <span class="string">"inputs"</span>: [], <span class="string">"name"</span>: <span class="string">"round"</span>, <span class="string">"outputs"</span>: [ &#123; <span class="string">"name"</span>: <span class="string">""</span>, <span class="string">"type"</span>: <span class="string">"uint256"</span> &#125; ], <span class="string">"payable"</span>: <span class="literal">false</span>, <span class="string">"stateMutability"</span>: <span class="string">"view"</span>, <span class="string">"type"</span>: <span class="string">"function"</span> &#125;, &#123; <span class="string">"constant"</span>: <span class="literal">true</span>, <span class="string">"inputs"</span>: [], <span class="string">"name"</span>: <span class="string">"winner"</span>, <span class="string">"outputs"</span>: [ &#123; <span class="string">"name"</span>: <span class="string">""</span>, <span class="string">"type"</span>: <span class="string">"address"</span> &#125; ], <span class="string">"payable"</span>: <span class="literal">false</span>, <span class="string">"stateMutability"</span>: <span class="string">"view"</span>, <span class="string">"type"</span>: <span class="string">"function"</span> &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> address = <span class="string">'0x49e21A6D5025679166E9b825090De83b1B651aB4'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// abstract address : 0x49e21A6D5025679166E9b825090De83b1B651aB4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此处abi已经json对象，不需要进行parse动作</span></span><br><span class="line"><span class="keyword">let</span> contractInstance = <span class="keyword">new</span> web3.eth.Contract(abi, address)</span><br><span class="line"><span class="built_in">console</span>.log(contractInstance)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'address :'</span>, contractInstance.options.address)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = contractInstance</span><br></pre></td></tr></table></figure><p>将该模块导入到App.js中，看浏览器的输出，如下图所示：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8welps3jwj31y60ceq87.jpg" alt="image-20191113143832451"></p><p>到这步时，合约的实例化已经完成了。</p><h1 id="4-合约交互"><a href="#4-合约交互" class="headerlink" title="4.合约交互"></a>4.合约交互</h1><h3 id="4-1-得到合约数据"><a href="#4-1-得到合约数据" class="headerlink" title="4.1 得到合约数据"></a>4.1 得到合约数据</h3><p>我们在App.js文件中编写，因为web3接口都是异步获取的，所以我们要在异步函数里编写。</p><p>获取到合约账户：<code>let accounts = await web3.eth.getAccounts();</code></p><p>获取到合约实例的管理员地址：<code>let manager = await lotteryInstance.methods.manager().call()</code></p><blockquote><p>call ()表示只是获取链上的数据，不涉及到修改数据的方法。</p></blockquote><h3 id="4-2-数据显示到网页中"><a href="#4-2-数据显示到网页中" class="headerlink" title="4.2 数据显示到网页中"></a>4.2 数据显示到网页中</h3><p>React中有一个State状态，它这里存放的都是将要展示的数据。</p><p>我们得到管理员和当前账户地址后，可以把他们两设置到state中，将来为了数据展现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置管理员与当前账户</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  currentAccount: accounts[<span class="number">0</span>], <span class="comment">//注意，可以不在state中事先声明</span></span><br><span class="line">  manager,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接着我们在render()函数中，将state状态中数据捕捉并呈现到网页上，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;hello 要开始彩票dapp咯&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        manager : &#123;this.state.manager&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动网页后，我们可以看到网页稍等几秒后，会显示出manaer后的管理员地址数据，也就是<code>0x6031xxx</code>这个账号部署的合约。如下图所示：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8wf091rnhj3136092mxx.jpg" alt="image-20191113145230106"></p><h3 id="4-3-取得所有数据呈现"><a href="#4-3-取得所有数据呈现" class="headerlink" title="4.3 取得所有数据呈现"></a>4.3 取得所有数据呈现</h3><p>我们需要以下数据呈现：</p><ol><li><strong>管理员地址</strong></li><li><strong>当期账号地址</strong></li><li><strong>目前参与人数</strong></li><li><strong>奖金池</strong></li><li><strong>第几期彩票</strong></li><li><strong>获奖者地址</strong></li><li><strong>玩家池地址</strong></li></ol><p>所以我们初始化state：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">      manager: <span class="string">''</span>,</span><br><span class="line">      currentAccount: <span class="string">''</span>,</span><br><span class="line">      playerCounts: <span class="number">0</span>,</span><br><span class="line">      balance: <span class="number">0</span>,</span><br><span class="line">      round: <span class="string">''</span>,</span><br><span class="line">      winner: <span class="string">''</span>,           </span><br><span class="line">      players: [],</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>并且使用react自带的钩子函数，可以在页面渲染之前调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> componentWillMount() &#123;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//获取当前的所有地址</span></span><br><span class="line">   <span class="keyword">let</span> accounts = <span class="keyword">await</span> web3.eth.getAccounts()</span><br><span class="line">   <span class="keyword">let</span> manager = <span class="keyword">await</span> lotteryInstance.methods.manager().call()</span><br><span class="line">   <span class="keyword">let</span> round = <span class="keyword">await</span> lotteryInstance.methods.round().call()</span><br><span class="line">   <span class="keyword">let</span> winner = <span class="keyword">await</span> lotteryInstance.methods.winner().call()</span><br><span class="line">   <span class="keyword">let</span> playerCounts = <span class="keyword">await</span> lotteryInstance.methods.getPlayersCount().call()</span><br><span class="line"></span><br><span class="line">   <span class="comment">//单位是wei，我们需要转换为ether单位</span></span><br><span class="line">   <span class="keyword">let</span> balanceWei = <span class="keyword">await</span> lotteryInstance.methods.getBalance().call()</span><br><span class="line">   <span class="comment">//从wei单位转换为'ether'单位</span></span><br><span class="line">   <span class="keyword">let</span> balance = web3.utils.fromWei(balanceWei, <span class="string">'ether'</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> players = <span class="keyword">await</span> lotteryInstance.methods.getPlayers().call()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> isShowButton = manager === accounts[<span class="number">0</span>] ? <span class="string">'inline'</span> : <span class="string">'none'</span>;</span><br><span class="line">   <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">     <span class="comment">// manager: manager,</span></span><br><span class="line">     manager,</span><br><span class="line">     round,</span><br><span class="line">     winner,</span><br><span class="line">     playerCounts,</span><br><span class="line">     balance,</span><br><span class="line">     players,</span><br><span class="line">     currentAccount: accounts[<span class="number">0</span>],</span><br><span class="line">     isShowButton,</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>接着我们在render()函数中呈现这些数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;hello 要开始彩票dapp咯&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br /</span>&gt;</span><br><span class="line">        manager : &#123;<span class="keyword">this</span>.state.manager&#125;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        currentAccount : &#123;<span class="keyword">this</span>.state.currentAccount&#125;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        winner : &#123;<span class="keyword">this</span>.state.winner&#125;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        players : &#123;<span class="keyword">this</span>.state.players&#125;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        amount : &#123;<span class="keyword">this</span>.state.amount&#125;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        round : &#123;<span class="keyword">this</span>.state.round&#125;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        playerCount : &#123;<span class="keyword">this</span>.state.playerCount&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8wgj5p05nj30xw0euq4r.jpg" alt="image-20191113154516244"></p><p>因为还没有玩家开始竞猜，所以有些数据是空的。</p><p>下一章我们将介绍如何设计界面和界面上的交互——如何竞猜，开奖和退奖。</p>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊dapp开发篇2-solidity编写合约</title>
      <link href="/2019/11/03/solidity%E7%BC%96%E5%86%99%E5%90%88%E7%BA%A6-02/"/>
      <url>/2019/11/03/solidity%E7%BC%96%E5%86%99%E5%90%88%E7%BA%A6-02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-dapp功能介绍"><a href="#1-dapp功能介绍" class="headerlink" title="1.dapp功能介绍"></a>1.dapp功能介绍</h1><p>就以一个彩票dapp为例，大致的理念就是任何人都可以投注每一期，然后每一期由管理员开奖，等概率抽中某个人，抽中的人就意味着中奖了。</p><p>1.全民参与</p><p>2.每一注只能投一个eth</p><p>3.每个人可以投注多次    </p><a id="more"></a><p>4.仅管理员定时开奖——可不可以不需要有人，而是定时开奖？(前台写个定时器，到点了就自动调用开奖的函数)</p><p>5.仅管理员可以退款</p><h1 id="2-合约编写"><a href="#2-合约编写" class="headerlink" title="2.合约编写"></a>2.合约编写</h1><h4 id="2-1-版本声明"><a href="#2-1-版本声明" class="headerlink" title="2.1 版本声明"></a>2.1 版本声明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.24</span>;</span><br></pre></td></tr></table></figure><p>版本标识指令，用来启动编译器检查。</p><p>这样的话，源文件不允许低于0.4.24版本的编译器编译，也不允许高于0.6.0版本的编译器编译。（第二个条件因使用^被添加）</p><blockquote><p>Pragma 是 pragmatic information 的简称，微软 Visual C++ 中译为标识。 Solidity 中沿用 C ，C++ 等中的编译指令概念，用于告知编译器 如何编译。</p></blockquote><h4 id="2-2-设置状态变量，添加构造函数"><a href="#2-2-设置状态变量，添加构造函数" class="headerlink" title="2.2 设置状态变量，添加构造函数"></a>2.2 设置状态变量，添加构造函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 管理员：负责开奖和退奖</span></span><br><span class="line"><span class="comment">// 2. 彩民池：address[] players</span></span><br><span class="line"><span class="comment">// 3. 当前期数：round，每期结束后加1</span></span><br><span class="line"><span class="comment">// 4. 当期的获奖者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在前端，可以通过访问函数得到manager，round，winner的信息</span></span><br><span class="line"><span class="comment">//manager(), round(), winner()</span></span><br><span class="line"></span><br><span class="line">address public manager;</span><br><span class="line">address[] public players;</span><br><span class="line">uint256 public round;</span><br><span class="line">address public winner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//谁部署合约谁就是管理者</span></span><br><span class="line"><span class="keyword">constructor</span>() public &#123;</span><br><span class="line">    manager = msg.sender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><blockquote><p>public:公开可访问，可以直接通过实例访问到变量或函数。</p><p>msg.sender:当前合约的调用者。</p></blockquote></li></ol><h4 id="2-3-投注函数"><a href="#2-3-投注函数" class="headerlink" title="2.3 投注函数"></a>2.3 投注函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//投注函数</span></span><br><span class="line"><span class="comment">//1. 每个人可以投多次，但是每次只能投 1 eth</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>) <span class="title">payable</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="comment">//限定用require</span></span><br><span class="line">        <span class="built_in">require</span>(msg.value == <span class="number">1</span> ether);</span><br><span class="line">        <span class="comment">//2. 把参与者加入到彩民池中</span></span><br><span class="line">        players.push(msg.sender);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li><p>合约⾥⾯的单位默认为 wei ，需要进⾏ether修饰，也可以使⽤字段1 * 10 ** 18进⾏转换。</p></li><li><p>payable关键字必须添加，否则⽆法进行转账交易。</p></li><li><p>msg.value全局变量能够接收到交易中的 value</p></li><li><p>数组添加使⽤ push</p></li></ol><blockquote><p>payable关键字：转账</p><p>require:判定是否满足条件</p><p>players.push(XX):数组添加元素</p></blockquote><h4 id="2-4-开奖函数"><a href="#2-4-开奖函数" class="headerlink" title="2.4 开奖函数"></a>2.4 开奖函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开奖函数：</span></span><br><span class="line"><span class="comment">// 目标：从彩民池（数组）中找到一个随机彩民（找一个随机数）</span></span><br><span class="line"><span class="comment">// 找到一个特别大的数（随机）， 对我们的彩民数组长度求余数。</span></span><br><span class="line"><span class="comment">// 用哈数值来实现大的随机数。 v3</span></span><br><span class="line"><span class="comment">// 哈希内容的随机：当前时间，区块的挖矿难度，彩民数量，作为输入</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">kaiJiang</span>(<span class="params"></span>) <span class="title">onlyManager</span> <span class="title">public</span> </span>&#123; </span><br><span class="line">      <span class="comment">//当前时间，区块的挖矿难度，彩民数</span></span><br><span class="line">    bytes memory v1 = abi.encodePacked(</span><br><span class="line">      block.timestamp, </span><br><span class="line">      block.difficulty, </span><br><span class="line">      players.length</span><br><span class="line">    );</span><br><span class="line">      </span><br><span class="line">    bytes32 v2 = keccak256(v1);</span><br><span class="line">uint256 v3 = uint256(v2);</span><br><span class="line"></span><br><span class="line">uint256 index = v3 % players.length;</span><br><span class="line"></span><br><span class="line">winner = players[index];</span><br><span class="line"></span><br><span class="line">      <span class="comment">//分配   获奖者9成，剩余的给管理员</span></span><br><span class="line">uint256 money = address(<span class="keyword">this</span>).balance * <span class="number">90</span> / <span class="number">100</span>;</span><br><span class="line">uint256 money1 = address(<span class="keyword">this</span>).balance - money;</span><br><span class="line"></span><br><span class="line">winner.transfer(money);</span><br><span class="line">manager.transfer(money1);</span><br><span class="line"><span class="comment">//期数+1，准备进入到下一轮</span></span><br><span class="line">round++;</span><br><span class="line">    <span class="comment">//delete 关键词删除</span></span><br><span class="line">    <span class="comment">//删除彩民信息，准备下一轮</span></span><br><span class="line"><span class="keyword">delete</span> players;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-退奖函数"><a href="#2-5-退奖函数" class="headerlink" title="2.5 退奖函数"></a>2.5 退奖函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退奖逻辑：</span></span><br><span class="line"><span class="comment">// 1. 遍历palyers数组，逐一退款1ether</span></span><br><span class="line"><span class="comment">// 2. 期数加一</span></span><br><span class="line"><span class="comment">// 3. 彩民池清零</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 调用者花费手续费（管理员）</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tuiJiang</span>(<span class="params"></span>) <span class="title">onlyManager</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (uint256 i= <span class="number">0</span>; i &lt; players.length; i++) &#123;</span><br><span class="line">            players[i].transfer(<span class="number">1</span> ether);</span><br><span class="line">        &#125;        </span><br><span class="line">        round++;</span><br><span class="line">        <span class="keyword">delete</span> players;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-modifier修饰函数"><a href="#2-6-modifier修饰函数" class="headerlink" title="2.6 modifier修饰函数"></a>2.6 modifier修饰函数</h4><p>比如开奖、退奖函数只能是管理员身份才能调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">modifier onlyManager &#123;</span><br><span class="line">       <span class="built_in">require</span>(msg.sender == manager);</span><br><span class="line">       _;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="2-7-公共变量访问函数"><a href="#2-7-公共变量访问函数" class="headerlink" title="2.7 公共变量访问函数"></a>2.7 公共变量访问函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取彩民人数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getPlayersCount</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">uint256</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> players.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取余额</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getBalance</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">uint256</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address(<span class="keyword">this</span>).balance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取彩民数组</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getPlayers</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">address[]</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> players;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>view: 如果⼀个函数⾥⾯，访问了状态变量，但是没有修改，我们使⽤view或者constant修饰。</p><p>如果访问了状态变量，⽽且修改了，那么就不能constant和view，否则会报错，不修饰即可</p></blockquote><h1 id="3-合约部署"><a href="#3-合约部署" class="headerlink" title="3.合约部署"></a>3.合约部署</h1><h4 id="3-1-remix介绍"><a href="#3-1-remix介绍" class="headerlink" title="3.1 remix介绍"></a>3.1 remix介绍</h4><p>remix官网网址：<a href="http://remix.ethereum.org/#optimize=false&amp;evmVersion=null&amp;version=soljson-v0.5.11+commit.c082d0b4.js" target="_blank" rel="noopener">http://remix.ethereum.org/#optimize=false&amp;evmVersion=null&amp;version=soljson-v0.5.11+commit.c082d0b4.js</a></p><p><strong>界面</strong></p><p>一开始进入这个界面的时候可能会没有这么多的插件，需要自己自行安装编译器等等。进入这个页面也会有点卡，请耐心等待。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ojgzcihfj31940nkdlp.jpg" alt="image-20191106192226027" style="zoom:67%;"><h4 id="3-2-选定Compiler版本，需要与solidity版本一致"><a href="#3-2-选定Compiler版本，需要与solidity版本一致" class="headerlink" title="3.2 选定Compiler版本，需要与solidity版本一致"></a>3.2 选定Compiler版本，需要与solidity版本一致</h4><p>这步很关键，不然代码会到处报错，solidity语言版本很重要，不怎么兼容前版本。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8oji9y0dlj30lu07m40f.jpg" alt="image-20191106192344471" style="zoom: 67%;"><h4 id="3-3-编译成功提示"><a href="#3-3-编译成功提示" class="headerlink" title="3.3 编译成功提示"></a>3.3 编译成功提示</h4><p>我们的合约名为Lottery，当出现<code>Contract:Lottery</code>时，就意味着合约编译成功了。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ojksw42jj30k10l2tdi.jpg" alt="image-20191106192609391" style="zoom: 50%;"><h4 id="3-4-部署合约界面"><a href="#3-4-部署合约界面" class="headerlink" title="3.4 部署合约界面"></a>3.4 部署合约界面</h4><p>以下就是部署界面，我们采用了<code>Injected Web3</code>的方式，它是调用我们当前的metamsk插件里的以太坊节点账户。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ojo9r925j30a20h7gmx.jpg" alt="image-20191106192929743" style="zoom:50%;"><p>当点击Deploy部署按钮时，就会调用metamask插件，就会出现合约部署的界面。</p><p>我们可以看到界面中提示我们 <code>Account1</code> 正在部署一个新合约，交易费是0.001156ETH,而部署和悦并不涉及到金额转账，所以 <code>value</code> 为0。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ojoh92fvj30k00ygacs.jpg" alt="image-20191106192941660" style="zoom: 33%;"><p>点击确认后，就会正式进行部署，我们是在以太坊测试网络中不熟的，可能会比较慢，需要等1分钟左右。</p><p>当成功部署后，我们就会看到如下界面，提示我们合约部署已经在测试网上确认。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8prvftwt4j309r0grwfz.jpg" alt="image-20191107205828889" style="zoom:50%;"><p>我们可以在以太坊测试网上查询到这个合约交易：</p><p>链接：<a href="https://ropsten.etherscan.io/tx/0x553d04b94420c2cf6cf326d276a5aa3cb27ed17c7421f114b3d1d68e5f14136d" target="_blank" rel="noopener">https://ropsten.etherscan.io/tx/0x553d04b94420c2cf6cf326d276a5aa3cb27ed17c7421f114b3d1d68e5f14136d</a></p><p>如下所示，我们可以看到合约的hash值是：0x3092eacf29dbe4a66fc04c854ff3838ae60407f3</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8prxt4jtjj30z00sk43v.jpg" alt="image-20191107210057301" style="zoom:67%;"><h4 id="3-5-查看部署后的实例方法"><a href="#3-5-查看部署后的实例方法" class="headerlink" title="3.5 查看部署后的实例方法"></a>3.5 查看部署后的实例方法</h4><p>接着，我们只需要合约源代码和合约地址两者就可以与已经上链的合约进行交互了。</p><p>如下图，我们可以看到当在<code>At Address</code>一栏中填入合约地址，就会出现之前部署好的合约实例。同时我们可以访问到合约中所有公开可访问的方法和状态变量。</p><p>如我们在合约中写到的一样，四个设置为public的状态变量<code>manager,players,round,winner</code>变成了函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">address public manager;</span><br><span class="line">address[] public players;</span><br><span class="line">uint256 public round;</span><br><span class="line">address public winner;</span><br></pre></td></tr></table></figure><blockquote><p>编译器为⾃动为所有的public的状态变量创建访问函数。</p></blockquote><p>另外，其余的蓝色按钮都是<code>view</code>关键词修饰的，读取状态变量，并不涉及修改变量及转账操作。</p><p>红色按钮<code>play</code>表示投注函数，使用<code>payable</code>关键词修饰，每次点击该按钮必须设置<code>value</code>为<code>1 ether</code>，否则函数调用会出错。因为我们在写合约的时候，在函数中加了<code>require(msg.value == 1 ether);</code>。</p><p>橙色按钮<code>kaijiang tuijiang</code>都是被修饰器<code>modifier onlyManager()</code>限定的，意味着只有管理员身份的账号才可以调用这两个函数功能。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ps3m4k58j30ds0ur0uu.jpg" alt="image-20191107210635980" style="zoom: 50%;"><h1 id="4-合约调式"><a href="#4-合约调式" class="headerlink" title="4.合约调式"></a>4.合约调式</h1><p>我们就以第一期投注为例，做个示例。</p><h4 id="4-1-合约最初状态"><a href="#4-1-合约最初状态" class="headerlink" title="4.1 合约最初状态"></a>4.1 合约最初状态</h4><p>点击所有蓝色按钮，可以看到目前除了管理员账号可以看到不为空外，其余都是0值。</p><p>合约账户余额为0，参加者为0，参加者数量为0，winner地址为空。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8psiwq1raj30dd0romyu.jpg" alt="image-20191107212118239" style="zoom:67%;"><h4 id="4-2-进行错误投注"><a href="#4-2-进行错误投注" class="headerlink" title="4.2 进行错误投注"></a>4.2 进行错误投注</h4><p>当我们使用账户3进行<code>paly</code>时，并且<code>Value</code>一栏并没有填值时，我们会发现交易失败了。</p><p>我们都知道投注函数在代码里必须要满足转账满足<code>require(msg.value == 1 ether);</code>这个条件，否则就会交易失败。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8psnafvyqj30du0bct9o.jpg" alt="image-20191107212530882" style="zoom:50%;"><p>如下图，我们可以看到除了交易费并没有转账金额，意味着这笔交易最终会失败。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8psmhfw2aj30a00h8q3w.jpg" alt="image-20191107212445132" style="zoom:50%;"><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8psoahzbjj30yg05ewff.jpg" alt="image-20191107212629422"></p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8psomjfbuj309u036dfu.jpg" alt="image-20191107212648043" style="zoom:50%;"><h4 id="4-3-进行正确投注"><a href="#4-3-进行正确投注" class="headerlink" title="4.3 进行正确投注"></a>4.3 进行正确投注</h4><p>还是使用账户3，填入<code>Value=1 ether</code>时，点击<code>play()</code>函数。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8pss7lu4ej30dh0bkwfg.jpg" alt="image-20191107213014875" style="zoom:50%;"><p>这时我们可以看到最终会消耗1.000063<code>ether</code>。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8pst4m4vsj30a00h80tp.jpg" alt="image-20191107213107846" style="zoom:50%;"><p>等十几秒之后，控制台和插件都会传来消息，提醒我们交易成工上链。</p><p>并且可以通过链接查询到这笔交易的发生。</p><p>链接：<a href="https://ropsten.etherscan.io/tx/0x55890e184c82b41a5abe3dcd011dfbe1678730102116bae68a4b8eb675bdc8f2" target="_blank" rel="noopener">https://ropsten.etherscan.io/tx/0x55890e184c82b41a5abe3dcd011dfbe1678730102116bae68a4b8eb675bdc8f2</a></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8psuhi8qyj310t03q753.jpg" alt="image-20191107213225825"></p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8psv1ud7ej309v035dfu.jpg" alt="image-20191107213258711" style="zoom:50%;"><h4 id="4-4-查看状态变量变化"><a href="#4-4-查看状态变量变化" class="headerlink" title="4.4 查看状态变量变化"></a>4.4 查看状态变量变化</h4><p>这时，我们使用账号3成功发起了一笔投注，我们可以发现账号3的账户地址是：<code>0x0f05763fF953eD2Bd09D192A4C38d34f64cCa789</code>。</p><p>这时我们再次查询之前的状态变量，看有没有发生变化呢。</p><p>如下图，我们发现有些变量已经有了值。</p><p>比如：合约余额有1 <code>ether</code>，玩家池有<code>0x0f05763fF953eD2Bd09D192A4C38d34f64cCa789</code>,玩家数量有1。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8pt0hp6oxj30dl0ottag.jpg" alt="image-20191107213812437" style="zoom:50%;"><p>我们接着进行了以下操作，进行了其他3笔投注，不过多介绍。</p><p>账户1 (<code>0x6031B6BE1C7D8bAf484c908fcb3485c477c3870B</code>)-&gt;<code>play()</code></p><p>账户4 (<code>0xa1C0C7538A555eee09B18F645f44E80fbc831581</code>)-&gt;<code>play()</code></p><p>账户5 (<code>0x65B87fe72f3694b7a673Abb8a0cb3387bB2c7497</code>)-&gt;<code>play()</code></p><p>最终状态如下：</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8pta593isj30eo0t4acb.jpg" alt="image-20191107214728872" style="zoom:50%;"><h4 id="4-5-普通用户调用管理员合约"><a href="#4-5-普通用户调用管理员合约" class="headerlink" title="4.5 普通用户调用管理员合约"></a>4.5 普通用户调用管理员合约</h4><p>当我们使用账户3调用<code>kaijiang()  tuijiang()</code>函数时，会报错。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ptciw32zj311n09g0ul.jpg" alt="image-20191107214946630"></p><h4 id="4-6-开奖"><a href="#4-6-开奖" class="headerlink" title="4.6 开奖"></a>4.6 开奖</h4><p>切换到账户1，点击开奖按钮，则会触发合约。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8pte3kjk7j30yu05n3zr.jpg" alt="image-20191107215116913"></p><p>最终显示这笔方法成功执行，并返回交易链接。</p><p>链接：<a href="https://ropsten.etherscan.io/tx/0x7ae85ec2e5464da7d8a3a2659b31ab6a0680360c998764ac7a46ac2f37b8a09a" target="_blank" rel="noopener">https://ropsten.etherscan.io/tx/0x7ae85ec2e5464da7d8a3a2659b31ab6a0680360c998764ac7a46ac2f37b8a09a</a></p><p>管理员这次比较幸运，是管理员中奖了，并且按照分成，最后的1成也是分给管理员账户的。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ptkghvlgj30zj0ntdkf.jpg" alt="image-20191107215723791" style="zoom:67%;"><p>也就是说，4个玩家4笔<code>play()</code>所支付的以太币，其中9成也就是3.6<code>ether</code>给了<code>winner</code>(也就是管理员)，剩下的辛苦费也给了管理员账户。</p><p>退奖函数就不介绍了，当管理员点击这个按钮时钱就物归原主。</p><h4 id="4-7-下一轮状态"><a href="#4-7-下一轮状态" class="headerlink" title="4.7 下一轮状态"></a>4.7 下一轮状态</h4><p>当管理员无论是进行开奖还是退奖，所有的状态都会改变，除了<code>round</code>轮数加1，<code>winner</code>为上一轮的获奖者地址外，其余的状态变量都会清空。如下图所示：</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ptnol0gtj30en0mgjsn.jpg" alt="image-20191107220029586" style="zoom: 50%;"><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h1><p>智能合约的编写在开发dapp时异常重要，你的合约必须逻辑清除，没有任何后台漏洞（代码是上链，所有人可以看到），否则网上那些利用合约漏洞来赚取不法利益的例子就会发生在我们身边。</p><p>万事开头难，合约编写是第一步，也是很重要的一步，希望慢慢来。</p>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊dapp开发篇1-环境工具介绍</title>
      <link href="/2019/11/01/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E4%BB%8B%E7%BB%8D-01/"/>
      <url>/2019/11/01/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%8E%AF%E5%A2%83%E4%BB%8B%E7%BB%8D-01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-背景介绍"><a href="#1-背景介绍" class="headerlink" title="1.背景介绍"></a>1.背景介绍</h1><h3 id="1-1-以太坊介绍"><a href="#1-1-以太坊介绍" class="headerlink" title="1.1 以太坊介绍"></a>1.1 以太坊介绍</h3><p>以太坊是继比特币之后又一个轰动世界的产品。以太坊这个名词可能大多数人都没有听过，但是当提到比特币的话，大家应该都听过关于它的新闻。在我理解，以太坊可以被当做比特币的后辈，是对他的升级及完善。</p><a id="more"></a><p>以太坊被称为区块链2.0，是由俄罗斯开发者<strong>Vitalik Buterin</strong>（V神）在2013年创建的，它针对比特币系统缺少图灵完备等缺点，建立了一个<strong>可编程、图灵完备</strong>的区块链。</p><p>区别于比特币，以太坊最大的一个特点就是：它允许任何人通过<strong>智能合约</strong>在平台上建立和使用去中心化应用Dapp（Decentralized Application）。</p><blockquote><p>图灵完备：一切可计算的问题都能通过计算解决。</p></blockquote><h3 id="1-2-智能合约"><a href="#1-2-智能合约" class="headerlink" title="1.2 智能合约"></a>1.2 智能合约</h3><p>智能合约，顾名思义，好像很智能的样子，但其实它并不智能，它的本质就是一段链上永久保存并且公开的代码。</p><p>智能合约是以太坊网络上的一种特殊账户，被称为内部账户，与以太坊上外部账户所区别，但他们所用的数据结构是一致的。</p><p>我认为在以太坊上，智能合约的编写尤其重要，是开发dapp的首要且最重要的事情。因为智能合约一旦部署成功上链，如果有漏洞的话那就会造成巨大的经济损失。</p><h3 id="1-3-IPFS介绍"><a href="#1-3-IPFS介绍" class="headerlink" title="1.3 IPFS介绍"></a>1.3 IPFS介绍</h3><p>ipfs（InterPlanetary File System），中文名被称为星际文件系统，没有深入接触过区块链的可能都没听过。我刚开始进组的时候老师就让我看这个，现在看来很有先见之明。我当时刚听到这个名词也是一脸懵，赶紧去查了资料，目前也算是入门的状态了。</p><p>ipfs是一种内容可寻址的对等超媒体分发协议。在IPFS网络中的节点将构成一个分布式文件系统。它是一个开放源代码项目，自2014年开始由Protocol Labs （协议实验室）在开源社区的帮助下发展。其最初由Juan Benet设计。</p><p>大家下载可能都用过迅雷，他是p2p（点对点）传输文件的形式，但迅雷众所周知是一个以营业为目的的企业，当用户提出下载需求时，总服务器维护一个负责搜寻资源的种子搜索器，负责为这个需求分配资源及连接用户。它的局限性就在于存在单点失败的可能性，中心服务器崩了，用户所有的需求就满足不了了。</p><p>区别于迅雷，ipfs是每个用户都维护着全网共同的信息，没有中心节点，不存在单点失败的可能性。</p><p>ipfs一般都是与以太坊开发结合起来，负责存储文件，而区块链只需要存储ipfs返回的hash值就可以了。用户可以通过在链上查询hash值，接着在ipfs系统里得到文件。</p><h1 id="2-开发环境介绍"><a href="#2-开发环境介绍" class="headerlink" title="2.开发环境介绍"></a>2.开发环境介绍</h1><h3 id="2-1-mac-linux系统"><a href="#2-1-mac-linux系统" class="headerlink" title="2.1 mac/linux系统"></a>2.1 mac/linux系统</h3><p>本机开发dapp是在mac系统上实现的，但是在windows系统上也可以实现开发，大致原理基本相通，除了安装开发环境和安装依赖外有点不太一样。</p><h3 id="2-2-nodejs"><a href="#2-2-nodejs" class="headerlink" title="2.2 nodejs"></a>2.2 nodejs</h3><p>本机的大环境是基于nodejs实现的，Node.js是一个让JavaScript运行在服务器端的开发平台，它让JavaScript的触角伸到了服务器端。</p><p>nodejs强大之处就在于它的npm工具，可以导入全球优秀开发者所贡献的开源依赖包，这使得nodejs这门语言异常强大。</p><p><strong>安装：</strong></p><p><code>brew install node</code></p><h3 id="2-3-ipfs"><a href="#2-3-ipfs" class="headerlink" title="2.3 ipfs"></a>2.3 ipfs</h3><p><strong>安装：（前提得下载golang）</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">brew install go</span><br><span class="line"></span><br><span class="line">配置gopath和goroot</span><br><span class="line">vi ~/.bash_profile</span><br><span class="line"></span><br><span class="line">export GOPATH="/Users/apple/go"</span><br><span class="line">export <span class="built_in">PATH</span>=$<span class="built_in">PATH</span>:$GOPATH/bin</span><br><span class="line"></span><br><span class="line">//调用生效</span><br><span class="line">. ~/.bash_profile</span><br><span class="line"></span><br><span class="line">//guthub上下载压缩包至本地</span><br><span class="line">//解压</span><br><span class="line">tar xvfz go-ipfs.tar.gz</span><br><span class="line"></span><br><span class="line">//安装</span><br><span class="line"><span class="built_in">cd</span> go-ipfs</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><h1 id="3-开发工具介绍"><a href="#3-开发工具介绍" class="headerlink" title="3.开发工具介绍"></a>3.开发工具介绍</h1><h3 id="3-1-metamask插件"><a href="#3-1-metamask插件" class="headerlink" title="3.1 metamask插件"></a>3.1 metamask插件</h3><p>MetaMask 是 Google Chrome 浏览器的扩展，将以太坊与 Google Chrome 结合，在 Chrome 浏览器上运行以太坊dapp以及身份识别的工具。它允许用户管理自己的账户，通过 Web3 JavaScript API，让dapp与以太坊区块链实现交互。</p><p>可以直接在Google扩展中查找安装。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8oboe487gj30ju0xaju4.jpg" alt="image-20191106145249031" style="zoom: 25%;"><h3 id="3-2-Ganache"><a href="#3-2-Ganache" class="headerlink" title="3.2 Ganache"></a>3.2 Ganache</h3><p>Ganache是一个为开发者提供的私有 Ethereum 区块链客户端, 可以用于本地部署, 开发, 测试应用程序, 测试代码，支持 Windows, MacOS 和 Linux 操作系统。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8obptnh61j31980ngn5u.jpg" alt="image-20191106145412226" style="zoom: 33%;"><h3 id="3-3-Remix"><a href="#3-3-Remix" class="headerlink" title="3.3 Remix"></a>3.3 Remix</h3><p>网址：<a href="http://remix.ethereum.org/#optimize=false&amp;evmVersion=null&amp;version=soljson-v0.5.11+commit.c082d0b4.js" target="_blank" rel="noopener">http://remix.ethereum.org/#optimize=false&amp;evmVersion=null&amp;version=soljson-v0.5.11+commit.c082d0b4.js</a></p><p>remix是以太坊出的专用于调式智能合约代码的工具。</p><h3 id="3-4-VScode"><a href="#3-4-VScode" class="headerlink" title="3.4 VScode"></a>3.4 VScode</h3><p>我习惯用vscode编写代码了，感觉界面优秀，画风很舒服。也可以用其他的编辑器来编写，比如sublime等等。</p><h1 id="4-所需知识"><a href="#4-所需知识" class="headerlink" title="4.所需知识"></a>4.所需知识</h1><h3 id="4-1-solidity"><a href="#4-1-solidity" class="headerlink" title="4.1 solidity"></a>4.1 solidity</h3><p>Solidity 是一门面向合约的、为实现智能合约而创建的高级编程语言。它是类js脚本语言，基本用法跟js语法差不多，稍微有些不同的差异。</p><blockquote><p>目前尝试 Solidity 编程的最好的方式是使用<strong>Remix</strong>。Remix 是一个基于 Web 浏览器的 IDE，它可以让你编写 Solidity 智能合约，然后部署并运行该智能合约。</p></blockquote><h3 id="4-2-truffle"><a href="#4-2-truffle" class="headerlink" title="4.2 truffle"></a>4.2 truffle</h3><p>Truffle是针对基于以太坊的Solidity语言的一套开发框架。本身基于Javascript。</p><p>truffle框架如果是新手入门的话会上手快一些，但是我就经常遇到solidity语言版本和solc编译器不一致、编译经常报错的情况，所以现在都是手动导入solc，自己编译。</p><h3 id="4-3-Web3"><a href="#4-3-Web3" class="headerlink" title="4.3 Web3"></a>4.3 Web3</h3><p>为了让dapp能够访问区块链上的数据，一种选择是使用web3.js提供的<code>web3</code>对象。底层实现上，它通过RPC 调用与本地节点通信。web3.js可以与任何暴露了RPC接口的区块链节点连接。</p><h3 id="4-4-React"><a href="#4-4-React" class="headerlink" title="4.4 React"></a>4.4 React</h3><p>React.js是前端三大新框架：Angular.js、React.js、Vue.js之一，这三大新框架的很多理念是相同的，但是也有各自的特点。</p><p>React起源于Facebook的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。</p><p>React可以作为一个js库来使用，我们在页面上引用相关的js文件，就可以使用它来做一些页面效果。</p><p>React也可以将界面拆分成一个个的组件，通过组件来构建界面，然后用自动化工具来生成单页面(SPA - single page application)应用系统。</p><p>本机就以React框架来实现所有的前端呈现和逻辑交互功能。</p><hr><p>下一篇就讲如何使用solidity语言来编写智能合约。</p>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一条以太坊私链，并使用Ethereum Wallet链接？</title>
      <link href="/2019/10/18/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%93%BE%E6%8E%A5%E9%92%B1%E5%8C%85-4/"/>
      <url>/2019/10/18/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%93%BE%E6%8E%A5%E9%92%B1%E5%8C%85-4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-开发环境介绍"><a href="#1-开发环境介绍" class="headerlink" title="1.开发环境介绍"></a>1.开发环境介绍</h1><ol><li><p><code>Geth(go-ethereum)</code>版本  ——1.8.27</p><p>Go-ethereum客户端通常被称为Geth，它是个命令行界面，执行在Go上实现的完整以太坊节点。</p><p>通过Geth，可以实现以太坊的各种功能，如账户的新建删除，挖矿，ether币的转移，智能合约的部署和执行等等。</p></li><li><p><code>go</code>版本——<code>go version go1.9.2 darwin/amd64</code></p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g828rh24wjj30l807u3zi.jpg" alt="image-20191018122933436" style="zoom:50%;"></li><li><p><code>mac</code>开发环境</p><a id="more"></a></li><li><p><code>Ethereum wallet</code>钱包</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8293t935jj30920723zj.jpg" alt="image-20191018124111560" style="zoom:50%;"></li></ol><h1 id="2-安装Geth"><a href="#2-安装Geth" class="headerlink" title="2.安装Geth"></a>2.安装Geth</h1><p>使用brew安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不更新homebrew  Homebrew是使用ruby开发的Mac的软件包管理器.</span></span><br><span class="line"><span class="keyword">export</span> HOMEBREW_NO_AUTO_UPDATE=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果你在核心仓库没有找到你需要的软件,那么你就需要安装第三方的仓库去安装你需要的软件</span></span><br><span class="line"><span class="comment">//tap命令的仓库源默认来至于Github</span></span><br><span class="line">brew tap ethereum/ethereum</span><br><span class="line">brew install ethereum</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查是都安装成功</span></span><br><span class="line">geth --help</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">ryks-MacBook-Pro<span class="number">-4</span>:~ apple$ geth --help</span><br><span class="line">USAGE:</span><br><span class="line">   geth [options] command [command options] [<span class="built_in">arguments</span>...]</span><br><span class="line">   </span><br><span class="line">VERSION:</span><br><span class="line">   <span class="number">1.8</span><span class="number">.27</span>-stable</span><br><span class="line">   </span><br><span class="line">COMMANDS:</span><br><span class="line">   account           Manage accounts</span><br><span class="line">   attach            Start an interactive JavaScript environment (connect to node)</span><br><span class="line">   bug               opens a <span class="built_in">window</span> to report a bug on the geth repo</span><br><span class="line">   <span class="built_in">console</span>           Start an interactive JavaScript environment</span><br><span class="line">   copydb            Create a local chain <span class="keyword">from</span> a target chaindata folder</span><br><span class="line">   dump              Dump a specific block <span class="keyword">from</span> storage</span><br><span class="line">   dumpconfig        Show configuration values</span><br><span class="line">   <span class="keyword">export</span>            Export blockchain into file</span><br><span class="line">   <span class="keyword">export</span>-preimages  Export the preimage database into an RLP stream</span><br><span class="line">   <span class="keyword">import</span>            Import a blockchain file</span><br><span class="line">   <span class="keyword">import</span>-preimages  Import the preimage database <span class="keyword">from</span> an RLP stream</span><br><span class="line">   init              Bootstrap and initialize a <span class="keyword">new</span> genesis block</span><br><span class="line">   js                Execute the specified JavaScript files</span><br><span class="line">   license           Display license information</span><br><span class="line">   makecache         Generate ethash verification cache (<span class="keyword">for</span> testing)</span><br><span class="line">   makedag           Generate ethash mining DAG (<span class="keyword">for</span> testing)</span><br><span class="line">   monitor           Monitor and visualize node metrics</span><br><span class="line">   removedb          Remove blockchain and state databases</span><br><span class="line">   version           Print version numbers</span><br><span class="line">   wallet            Manage Ethereum presale wallets</span><br><span class="line">   help, h           Shows a list <span class="keyword">of</span> commands or help <span class="keyword">for</span> one command</span><br></pre></td></tr></table></figure><h1 id="3-搭建私有链"><a href="#3-搭建私有链" class="headerlink" title="3.搭建私有链"></a>3.搭建私有链</h1><h4 id="3-1-自定义创世区块信息"><a href="#3-1-自定义创世区块信息" class="headerlink" title="3.1 自定义创世区块信息"></a>3.1 自定义创世区块信息</h4><p>节点启动之初必须载入正确的创世区块信息，且不得任意修改。</p><p>在一个全英文路径下创建一个genesis,json文件（中文路径会报错）</p><p>json文件内容如下：</p><p><strong>config, difficulty, gasLimit, alloc</strong>创始区块文件中，这几个文件是必须的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"alloc"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"config"</span>: &#123;</span><br><span class="line">        <span class="attr">"chainID"</span>: <span class="number">72</span>,</span><br><span class="line">        <span class="attr">"homesteadBlock"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"eip155Block"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"eip158Block"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"nonce"</span>: <span class="string">"0x0000000000000000"</span>,</span><br><span class="line">    <span class="attr">"difficulty"</span>: <span class="string">"0x4000"</span>,</span><br><span class="line">    <span class="attr">"mixhash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">    <span class="attr">"coinbase"</span>: <span class="string">"0x0000000000000000000000000000000000000000"</span>,</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"0x00"</span>,</span><br><span class="line">    <span class="attr">"parentHash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">    <span class="attr">"extraData"</span>: <span class="string">"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"</span>,</span><br><span class="line">    <span class="attr">"gasLimit"</span>: <span class="string">"0xffffffff"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>链配置<br><code>config</code> 项是定义链配置，会影响共识协议，虽然链配置对创世影响不大，但新区块的出块规则均依赖链配置。</li><li>创世区块头信息配置<ul><li><code>nonce</code>：随机数，对应创世区块 <code>Nonce</code> 字段。</li><li><code>timestamp</code>：UTC 时间戳，对应创世区块 <code>Time</code> 字段。</li><li><code>extraData</code>：额外数据，对应创世区块 <code>Extra</code> 字段。</li><li><code>gasLimit</code>：<strong>必填</strong>，燃料上限，对应创世区块 <code>GasLimit</code> 字段。</li><li><code>difficulty</code>：<strong>必填</strong>，难度系数，对应创世区块 <code>Difficulty</code> 字段。搭建私有链时，需要根据情况选择合适的难度值，以便调整出块。</li><li><code>minHash</code>：一个哈希值，对应创世区块的 <code>MixDigest</code> 字段。和 nonce 值一起证明在区块上已经进行了足够的计算。</li><li><code>coinbase</code>：一个地址，对应创世区块的 <code>Coinbase</code> 字段。</li></ul></li><li>初始账户资产配置<br><code>alloc</code> 项是创世中初始账户资产配置。在生成创世区块时，将此数据集中的账户资产写入区块中，相当于预挖矿。这对开发测试和私有链非常好用，不需要挖矿就可以直接为任意多个账户分配资产。(我们这里置空)</li></ol><h4 id="3-2-搭建节点并启动"><a href="#3-2-搭建节点并启动" class="headerlink" title="3.2 搭建节点并启动"></a>3.2 搭建节点并启动</h4><p><code>1. geth --datadir &quot;./node1&quot; init blockGensis.json</code></p><p>–datadir参数：指定以太坊运行时数据存放目录</p><p>–init参数： 务必要加上，否则可以创建成功，但是后⾯有问题</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7vnde06myj30yv08cgo4.jpg" alt="image-20191012193601158"></p><p><code>2. geth --datadir &quot;./node1&quot; --networkid 72 --port 30301 console</code></p><p>–datadir: 指定节点数据存储路径，此处会⾃动创建 node1 ，之所以这样命名，是因为后⾯会创建 node2 ，便于模拟多个节点交互</p><p>–networkid: 当前⽹络的id，写在genesis.json中的</p><p>–port: 端⼝ </p><p>–console: 表明同时启动⼀个交互的终端(⾮必要)</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7vnn6q1ktj315h0bxadu.jpg" alt="image-20191012194527946"></p><p><strong>启动节点后，出现控制台，有一些内置函数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- eth：包含一些跟操作区块链相关的方法；</span><br><span class="line">- net：包含一些查看p2p网络状态的方法；</span><br><span class="line">- admin：包含一些与管理节点相关的方法；</span><br><span class="line">- miner：包含启动&amp;停止挖矿的一些方法；</span><br><span class="line">- personal：主要包含一些管理账户的方法；</span><br><span class="line">- txpool：包含一些查看交易内存池的方法；</span><br><span class="line">- web3：包含了以上对象，还包含一些单位换算的方法。</span><br></pre></td></tr></table></figure><p>这些命令支持 <code>Tab</code> 键自动补全。</p><p><strong>常用命令：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">personal.newAccount()：创建账户；</span><br><span class="line">personal.unlockAccount()：解锁账户；</span><br><span class="line">eth.accounts：枚举系统中的账户；</span><br><span class="line">eth.getBalance()：查看账户余额，</span><br><span class="line">返回值的单位是 Wei（Wei 是以太坊中最小货币面额单位，类似比特币中的聪，</span><br><span class="line"><span class="number">1</span> ether = <span class="number">10</span>^<span class="number">18</span> Wei）；</span><br><span class="line">eth.blockNumber：列出区块总数；</span><br><span class="line">eth.getTransaction()：获取交易；</span><br><span class="line">eth.getBlock()：获取区块；</span><br><span class="line">miner.start()：开始挖矿；</span><br><span class="line">miner.stop()：停止挖矿；</span><br><span class="line">web3.fromWei()：Wei 换算成以太币；</span><br><span class="line">web3.toWei()：以太币换算成 Wei；</span><br><span class="line">txpool.status：交易池中的状态；</span><br><span class="line">admin.addPeer()：连接到其他节点；</span><br></pre></td></tr></table></figure><h4 id="3-3-创建账号并挖矿"><a href="#3-3-创建账号并挖矿" class="headerlink" title="3.3 创建账号并挖矿"></a>3.3 创建账号并挖矿</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查web3版本</span></span><br><span class="line">&gt; web3.version</span><br><span class="line">&#123;</span><br><span class="line">  api: <span class="string">"0.20.1"</span>,</span><br><span class="line">  ethereum: <span class="string">"0x3f"</span>,</span><br><span class="line">  network: <span class="string">"72"</span>,</span><br><span class="line">  node: <span class="string">"Geth/v1.8.27-stable/darwin-amd64/go1.12.4"</span>,</span><br><span class="line">  whisper: <span class="literal">undefined</span>,</span><br><span class="line">  getEthereum: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>),</span></span><br><span class="line"><span class="function">  <span class="title">getNetwork</span>: <span class="title">function</span>(<span class="params">callback</span>),</span></span><br><span class="line"><span class="function">  <span class="title">getNode</span>: <span class="title">function</span>(<span class="params">callback</span>),</span></span><br><span class="line"><span class="function">  <span class="title">getWhisper</span>: <span class="title">function</span>(<span class="params">callback</span>)</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//查看有没有账户，为空</span></span><br><span class="line"><span class="function">&gt; <span class="title">eth</span>.<span class="title">accounts</span></span></span><br><span class="line">[]</span><br><span class="line">  </span><br><span class="line"><span class="comment">//新建账户，参数为密码</span></span><br><span class="line">&gt; personal.newAccount(<span class="string">"1"</span>)</span><br><span class="line"><span class="string">"0x43960fd7dcefa6c05daa5de69f31e717b7f57ec0"</span></span><br><span class="line">&gt; personal.newAccount(<span class="string">"2"</span>)</span><br><span class="line"><span class="string">"0xa63a6c5915f2a912aa327cca665d2633667067fa"</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//挖矿</span></span><br><span class="line">  miner.start()</span><br><span class="line">  </span><br><span class="line"><span class="comment">//停止挖矿</span></span><br><span class="line">  miner.stop()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;  eth.accounts</span><br><span class="line">[<span class="string">"0x43960fd7dcefa6c05daa5de69f31e717b7f57ec0"</span>, <span class="string">"0xa63a6c5915f2a912aa327cca665d2633667067fa"</span>]</span><br></pre></td></tr></table></figure><h1 id="4-新增节点并链接，转账"><a href="#4-新增节点并链接，转账" class="headerlink" title="4.新增节点并链接，转账"></a>4.新增节点并链接，转账</h1><h4 id="4-1-新增节点"><a href="#4-1-新增节点" class="headerlink" title="4.1 新增节点"></a>4.1 新增节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir <span class="string">"./node2"</span> init genesis.json </span><br><span class="line">geth --datadir <span class="string">"./node2"</span> --networkid <span class="number">72</span> --port <span class="number">30302</span></span><br></pre></td></tr></table></figure><p>新建节点node2，与node1节点创建方式一样，不过端口设置为30302</p><h4 id="4-2-创建账户"><a href="#4-2-创建账户" class="headerlink" title="4.2 创建账户"></a>4.2 创建账户</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; personal.newAccount(<span class="string">'1'</span>)</span><br><span class="line"><span class="string">"0xe51d257963476d4bb1c41fca4b428ac463a0c41a"</span></span><br><span class="line">&gt; personal.newAccount(<span class="string">'1'</span>)</span><br><span class="line"><span class="string">"0xecaa48b51d8e441ea78dc888e1a89b09381329ec"</span></span><br></pre></td></tr></table></figure><h4 id="4-3-查看当前节点信息"><a href="#4-3-查看当前节点信息" class="headerlink" title="4.3 查看当前节点信息"></a>4.3 查看当前节点信息</h4><p>node2节点信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt; admin.nodeInfo</span><br><span class="line">&#123;</span><br><span class="line">  enode: <span class="string">"enode://24bfcc9c913aee4f38722dc43a41c250063b4f6a8f34bd4a926272ee8f042da77013b721b1fab8a68f0d340d5e9697f0d05be708f7b47c287be2fd3399a66f85@10.21.238.199:30302"</span>,</span><br><span class="line">  enr: <span class="string">"0xf896b8402622e2ee861a9e551f8303600c0fab80a388dae84042c4773e8dc0e3662c2e3b4c0c42f75c254f13f41c8c06dd11b3673c40227cfacee394d82e089234f2930d0283636170c6c5836574683f826964827634826970840a15eec789736563703235366b31a10324bfcc9c913aee4f38722dc43a41c250063b4f6a8f34bd4a926272ee8f042da78374637082765e8375647082765e"</span>,</span><br><span class="line">  id: <span class="string">"1615e13fbfae24d7724e488619d9d59cef663e7b6e24e0a05f6c79bd6f6e167e"</span>,</span><br><span class="line">  ip: <span class="string">"10.21.238.199"</span>,</span><br><span class="line">  listenAddr: <span class="string">"[::]:30302"</span>,</span><br><span class="line">  name: <span class="string">"Geth/v1.8.27-stable/darwin-amd64/go1.12.4"</span>,</span><br><span class="line">  ports: &#123;</span><br><span class="line">    discovery: <span class="number">30302</span>,</span><br><span class="line">    listener: <span class="number">30302</span></span><br><span class="line">  &#125;,</span><br><span class="line">  protocols: &#123;</span><br><span class="line">    eth: &#123;</span><br><span class="line">      config: &#123;</span><br><span class="line">        chainId: <span class="number">72</span>,</span><br><span class="line">        eip150Hash: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">        eip155Block: <span class="number">0</span>,</span><br><span class="line">        eip158Block: <span class="number">0</span>,</span><br><span class="line">        homesteadBlock: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      difficulty: <span class="number">16384</span>,</span><br><span class="line">      genesis: <span class="string">"0x942f596f99dc8879b426b59080824662e1f97587353d087487fea0a0e2a2588a"</span>,</span><br><span class="line">      head: <span class="string">"0x942f596f99dc8879b426b59080824662e1f97587353d087487fea0a0e2a2588a"</span>,</span><br><span class="line">      network: <span class="number">72</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>node1节点信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt; admin.nodeInfo</span><br><span class="line">&#123;</span><br><span class="line">  enode: <span class="string">"enode://13b1b29c814089ae9f1c45b5350c2e73e647d78a9722640ba2ae378970f90e747a799e98cf2efdebb4fd4ca3f0a9f5bb32a2fcd8a3bd01a1f6e76a0be05634dc@10.21.238.199:30301"</span>,</span><br><span class="line">  enr: <span class="string">"0xf89cb8403e4ae603a565aa7d2f5cacce5ddf96d457a0eb7ed4a8c4c92a636f72b4c4669832284b0c243ffe9ec5f03ef05f1e59394f2fdb70bb5284d58501af6149a52c9f0683636170ccc5836574683ec5836574683f826964827634826970840a15eec789736563703235366b31a10213b1b29c814089ae9f1c45b5350c2e73e647d78a9722640ba2ae378970f90e748374637082765d8375647082765d"</span>,</span><br><span class="line">  id: <span class="string">"a3d459c6ca9dd8f8f964db7e3db0e4406a01b27d8079d5ae1653343c7f40caee"</span>,</span><br><span class="line">  ip: <span class="string">"10.21.238.199"</span>,</span><br><span class="line">  listenAddr: <span class="string">"[::]:30301"</span>,</span><br><span class="line">  name: <span class="string">"Geth/v1.8.27-stable/darwin-amd64/go1.12.4"</span>,</span><br><span class="line">  ports: &#123;</span><br><span class="line">    discovery: <span class="number">30301</span>,</span><br><span class="line">    listener: <span class="number">30301</span></span><br><span class="line">  &#125;,</span><br><span class="line">  protocols: &#123;</span><br><span class="line">    eth: &#123;</span><br><span class="line">      config: &#123;</span><br><span class="line">        chainId: <span class="number">72</span>,</span><br><span class="line">        eip150Hash: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">        eip155Block: <span class="number">0</span>,</span><br><span class="line">        eip158Block: <span class="number">0</span>,</span><br><span class="line">        homesteadBlock: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      difficulty: <span class="number">541056</span>,</span><br><span class="line">      genesis: <span class="string">"0x942f596f99dc8879b426b59080824662e1f97587353d087487fea0a0e2a2588a"</span>,</span><br><span class="line">      head: <span class="string">"0x662e716503e6b737c376511c3ca8afc19220374f9206f14d04bf0c239232e9fc"</span>,</span><br><span class="line">      network: <span class="number">72</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-node1添加node2"><a href="#4-4-node1添加node2" class="headerlink" title="4.4 node1添加node2"></a>4.4 node1添加node2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;admin.addPeer(<span class="string">"enode://24bfcc9c913aee4f38722dc43a41c250063b4f6a8f34bd4a926272ee8f042da77013b721b1fab8a68f0d340d5e9697f0d05be708f7b47c287be2fd3399a66f85@10.21.238.199:30302"</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="5-连接到wallet"><a href="#5-连接到wallet" class="headerlink" title="5.连接到wallet"></a>5.连接到wallet</h1><h4 id="5-1-查看ethereum"><a href="#5-1-查看ethereum" class="headerlink" title="5.1 查看ethereum"></a>5.1 查看ethereum</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ryks-MacBook-Pro<span class="number">-4</span>:~ apple$ ps -ef | grep geth</span><br><span class="line">  <span class="number">501</span>  <span class="number">5608</span>  <span class="number">5602</span>   <span class="number">0</span>  <span class="number">2</span>:<span class="number">46</span>下午 ttys000    <span class="number">0</span>:<span class="number">00.79</span> geth --datadir ./node1 --ipcpath /Users/apple/Library/Ethereum/geth.ipc</span><br><span class="line">  <span class="number">501</span>  <span class="number">5629</span>  <span class="number">5621</span>   <span class="number">0</span>  <span class="number">2</span>:<span class="number">46</span>下午 ttys001    <span class="number">0</span>:<span class="number">00.00</span> grep geth</span><br></pre></td></tr></table></figure><p>Ethereum客户端每次都要指定特定的geth.ipc，指定–testnet 来和测试⽹络连接，–testnet参数就是 Ropsten⽹络。</p><p>我们可以事先拉起⼀个geth服务，其中将存储数据参数指定为我们的私有⽹络，这样Mist在启动时， 就会⾃动连接到我们的服务，⽽不会重新起服务。</p><h4 id="5-2-mist连接到私有链"><a href="#5-2-mist连接到私有链" class="headerlink" title="5.2 mist连接到私有链"></a>5.2 mist连接到私有链</h4><p><code>geth  --datadir ./node1  --ipcpath /Users/apple/Library/Ethereum/geth.ipc</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g82cv8490oj30zm0kg0v5.jpg" alt="image-20191018145133590"></p><p>之后还想尝试用浏览器显示出所有交易等，但是遇到了某些问题，没能运行成功。</p><p>END</p>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dapp开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合约交互时发现访问不了地址的bug</title>
      <link href="/2019/09/29/%E5%90%88%E7%BA%A6%E4%BA%A4%E4%BA%92%E5%8F%91%E7%8E%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/29/%E5%90%88%E7%BA%A6%E4%BA%A4%E4%BA%92%E5%8F%91%E7%8E%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在编写合约交互的过程中，需要一个<strong>web3</strong>实例用来调用合约访问账户等。</p><p>我们需要设置一个provider。为了保证不会覆盖一个已有的provider（Mist浏览器或安装了MetaMak的浏览器会提供Provider），需要先检查 <strong>web3</strong> 实例是否已存在。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  web3 = <span class="keyword">new</span> Web3(web3.currentProvider);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// set the provider you want from Web3.providers</span></span><br><span class="line">  web3 = <span class="keyword">new</span> Web3(<span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">"http://localhost:8545"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以使用<strong>web3</strong>提供的接口方法了。比如：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">web3.eth.defaultAccount</span><br><span class="line">web3.eth.getBalance</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>启动程序<code>npm run dev</code>，打开了浏览器3000端口访问到了首页界面。</p><p>但是发现控制台console出现了错误提示：<strong>invalid address</strong></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7pom0ilibj31ty0hs786.jpg" alt="image-20191007154528876"></p><p>以为是本地由Ganache软件生成的账号程序访问不到。</p><p>上网找解决方法都说账户需要解锁，也就是调用web3的解锁账户的命令。</p><p><code>web3.eth.personal.unlockAccount(web3.eth.defaultAccount).then(console.log(&#39;Account unlocked!&#39;));</code></p><p>但是运行了之后提醒<code>unlockcount</code>函数不存在。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7popvzpv6j31hm08kdhx.jpg" alt="image-20191007154917354"></p><p>之后偶然在网上搜索”metamask访问不了账户地址“这个问题，终于问题得到了解决。</p><p><a href="https://blog.csdn.net/rejames/article/details/89876967" target="_blank" rel="noopener">https://blog.csdn.net/rejames/article/details/89876967</a></p><p>原来最新版的metamask插件默认启用了隐私模式，而官方文档中并没有更新。</p><p>现在新的检查方式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查是否是新的MetaMask 或 DApp浏览器</span></span><br><span class="line"><span class="keyword">var</span> web3Provider;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.ethereum) &#123;</span><br><span class="line">   web3Provider = <span class="built_in">window</span>.ethereum;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 请求用户授权</span></span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">window</span>.ethereum.enable();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 用户不授权时</span></span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"User denied account access"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.web3) &#123;   <span class="comment">// 老版 MetaMask Legacy dapp browsers...</span></span><br><span class="line">  web3Provider = <span class="built_in">window</span>.web3.currentProvider;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  web3Provider = <span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">'http://localhost:8545'</span>);</span><br><span class="line">&#125;</span><br><span class="line">web3 = <span class="keyword">new</span> Web3(web3Provider);</span><br></pre></td></tr></table></figure><p>成功引入后，你现在可以使用 web3 对象的API 了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dapp开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ipfs使用</title>
      <link href="/2019/09/26/ipfs%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/09/26/ipfs%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="1-mac安装ipfs——使用npm工具"><a href="#1-mac安装ipfs——使用npm工具" class="headerlink" title="1.mac安装ipfs——使用npm工具"></a>1.mac安装ipfs——使用npm工具</h4><p><code>sudo npm install ipfs --global</code></p><h4 id="2-本地上传文件并同步网络"><a href="#2-本地上传文件并同步网络" class="headerlink" title="2.本地上传文件并同步网络"></a>2.本地上传文件并同步网络</h4><ol><li><p><code>touch index.html</code></p></li><li><p><code>vim index.html</code></p></li><li><p>初始化过程，生成本地节点</p></li></ol><p><code>ipfs init</code> </p><ol start="4"><li>保存在本地ipfs</li></ol><p><code>ipfs add index.html</code></p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3ay3cp0j30w0070abd.jpg" alt="image-20190926182126347" style="zoom:50%;"><ol start="5"><li>同步到网络中</li></ol><a id="more"></a><p><code>ipfs daemon</code></p><blockquote><p>注意链接的格式：<a href="https://ipfs.io/ipfs/QmT78zSuBmuS4z925WZfrqQ1qHaJ56DQaTfyMUF7F8ff5o" target="_blank" rel="noopener">https://ipfs.io/ipfs/QmT78zSuBmuS4z925WZfrqQ1qHaJ56DQaTfyMUF7F8ff5o</a></p></blockquote><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3e7sdxuj30pg09ugn9.jpg" alt="image-20190926182439500" style="zoom:50%;"><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3dv5yuhj31ro08a42t.jpg" alt="image-20190926182419163"></p><h4 id="3-ipfs项目"><a href="#3-ipfs项目" class="headerlink" title="3.ipfs项目"></a>3.ipfs项目</h4><ol><li>ipfs-desktop</li></ol><p><a href="https://github.com/ipfs-shipyard/ipfs-desktop" target="_blank" rel="noopener">https://github.com/ipfs-shipyard/ipfs-desktop</a></p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3i3vr9rj30tc0hodma.jpg" alt="image-20190926182825385" style="zoom:50%;"><h4 id="4-ipfs后台界面"><a href="#4-ipfs后台界面" class="headerlink" title="4. ipfs后台界面"></a>4. ipfs后台界面</h4><p><a href>localhost:5001/webui</a></p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3ksutpzj31j30u0wnf.jpg" alt="image-20190926183100234" style="zoom:50%;"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3lres70j31pd0u0dm4.jpg" alt="image-20190926183156292" style="zoom:50%;"><h4 id="5-与浏览器交互"><a href="#5-与浏览器交互" class="headerlink" title="5.与浏览器交互"></a>5.与浏览器交互</h4><ol><li><p><code>npm install -g create-react-app</code></p></li><li><p><code>create-react-app ipfs-demo</code></p></li><li><p>进入ipfs-demo文件夹，安装ipfsjs模块</p><p><code>npm install ipfs-api --save</code></p><p><code>ipfs-api</code>改名字了，改成<code>ipfs-http-client</code>了</p><p>会发现package.json文件依赖会多出ipfs-api</p></li></ol><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d67ob9n4j30o80bct9r.jpg" alt="image-20190926200206212" style="zoom:50%;"><ol start="4"><li>解决跨域，端口不一致问题</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods <span class="string">'["PUT","GET", "POST", "OPTIONS"]'</span></span><br><span class="line">ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin <span class="string">'["*"]'</span></span><br><span class="line">ipfs config --json API.HTTPHeaders.Access-Control-Allow-Credentials <span class="string">'["true"]'</span></span><br><span class="line">ipfs config --json API.HTTPHeaders.Access-Control-Allow-Headers <span class="string">'["Authorization"]'</span></span><br><span class="line">ipfs config --json API.HTTPHeaders.Access-Control-Expose-Headers <span class="string">'["Location"]'</span></span><br></pre></td></tr></table></figure><p>使用<code>ipfs config show</code>就会看到config配置多出了API配置：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d6clhnp4j30r80imdhg.jpg" alt="image-20190926200649544"></p><ol start="5"><li><p>运行react项目</p><p><code>npm start</code></p></li><li><p>修改App.js文件内容——（react必学）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">          <span class="keyword">super</span>(props);</span><br><span class="line">          <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            strHash: <span class="literal">null</span>,</span><br><span class="line">            strContent: <span class="literal">null</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            ref=<span class="string">"ipfsContent"</span></span><br><span class="line">           /&gt;</span><br><span class="line">          &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> ipfsContent = <span class="keyword">this</span>.refs.ipfsContent.value;</span><br><span class="line">            <span class="built_in">console</span>.log(ipfsContent);</span><br><span class="line">          &#125;&#125;&gt;提交到IPFS&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          &lt;p&gt;&#123;this.state.strHash&#125;&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">          &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'从ipfs读取数据。'</span>)</span><br><span class="line">           &#125;&#125;&gt;读取数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">           &lt;h1&gt;&#123;this.state.strContent&#125;&lt;/</span>h1&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>当我们在输入框中输入一个字符串时，点击<code>提交到IPFS</code>按钮，将文本框中的内容取出来打印，之后我们将这个数据上传到<code>IPFS</code>。点击<code>读取数据</code>按钮，我们也只是随便打印了一个字符串，后面需要从<code>IPFS</code>读取数据，然后将读取的数据存储到状态机变量<code>strContent</code>中并且展示出来。</p></li><li><p>导入ipfs模块并使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ipfsAPI = <span class="built_in">require</span>(<span class="string">'ipfs-api'</span>);</span><br><span class="line"><span class="keyword">const</span> ipfs = ipfsAPI(&#123;<span class="attr">host</span>: <span class="string">'localhost'</span>, <span class="attr">port</span>: <span class="string">'5001'</span>, <span class="attr">protocol</span>: <span class="string">'http'</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p>编写上传大文本字符串到IPFS的Promise函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">saveTextBlobOnIpfs = <span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> descBuffer = Buffer.from(blob, <span class="string">'utf-8'</span>);</span><br><span class="line">      ipfs.add(descBuffer).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">        resolve(response[<span class="number">0</span>].hash);</span><br><span class="line">      &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>response[0].hash</code>返回的是数据上传到<code>IPFS</code>后返回的<code>HASH</code>字符串。</p></li><li><p>上传数据到IPFS</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.saveTextBlobOnIpfs(ipfsContent).then(<span class="function">(<span class="params">hash</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(hash);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">strHash</span>: hash&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>ipfsContent</code>是从文本框中取到的数据，调用<code>this.saveTextBlobOnIpfs</code>方法将数据上传后，会返回字符串<code>hash</code>，并且将<code>hash</code>存储到状态机变量<code>strHash</code>中。</p></li><li><p>提交数据的完整代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ipfsAPI = <span class="built_in">require</span>(<span class="string">'ipfs-api'</span>);</span><br><span class="line"><span class="keyword">const</span> ipfs = ipfsAPI(&#123;<span class="attr">host</span>: <span class="string">'localhost'</span>, <span class="attr">port</span>: <span class="string">'5001'</span>, <span class="attr">protocol</span>: <span class="string">'http'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      strHash: <span class="literal">null</span>,</span><br><span class="line">      strContent: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  saveTextBlobOnIpfs = <span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> descBuffer = Buffer.from(blob, <span class="string">'utf-8'</span>);</span><br><span class="line">      ipfs.add(descBuffer).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">        resolve(response[<span class="number">0</span>].hash);</span><br><span class="line">      &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;div className="App"&gt;</span><br><span class="line">      &lt;input ref="ipfsContent" /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">          let ipfsContent = this.refs.ipfsContent.value;</span><br><span class="line">          console.log(ipfsContent);</span><br><span class="line">          this.saveTextBlobOnIpfs(ipfsContent).then((hash) =&gt; &#123;</span><br><span class="line">            console.log(hash);</span><br><span class="line">            this.setState(&#123;strHash: hash&#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;&#125;&gt;提交到IPFS&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;&#123;this.state.strHash&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">          console.log('从ipfs读取数据。')</span><br><span class="line">        &#125;&#125;&gt;读取数据&lt;/button&gt;</span><br><span class="line">      &lt;h1&gt;&#123;this.state.strContent&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure></li><li><p>刷新网页看后台数据</p></li><li><p>从ipfs读取数据</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ipfs.cat(<span class="keyword">this</span>.state.strHash).then(<span class="function">(<span class="params">stream</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(stream);</span><br><span class="line">    <span class="keyword">let</span> strContent = Utf8ArrayToStr(stream);</span><br><span class="line">    <span class="built_in">console</span>.log(strContent);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">strContent</span>: strContent&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>stream</code>为<code>Uint8Array</code>类型的数据，下面的方法是将<code>Uint8Array</code>转换为<code>string</code>字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Utf8ArrayToStr</span><span class="params">(array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> out, i, len, c;</span><br><span class="line">    <span class="keyword">var</span> char2, char3;</span><br><span class="line"></span><br><span class="line">    out = <span class="string">""</span>;</span><br><span class="line">    len = <span class="keyword">array</span>.length;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; len) &#123;</span><br><span class="line">    c = <span class="keyword">array</span>[i++];</span><br><span class="line">    <span class="keyword">switch</span>(c &gt;&gt; <span class="number">4</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">          <span class="comment">// 0xxxxxxx</span></span><br><span class="line">          out += String.fromCharCode(c);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>: <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">          <span class="comment">// 110x xxxx   10xx xxxx</span></span><br><span class="line">          char2 = <span class="keyword">array</span>[i++];</span><br><span class="line">          out += String.fromCharCode(((c &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>) | (char2 &amp; <span class="number">0x3F</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">          <span class="comment">// 1110 xxxx  10xx xxxx  10xx xxxx</span></span><br><span class="line">          char2 = <span class="keyword">array</span>[i++];</span><br><span class="line">          char3 = <span class="keyword">array</span>[i++];</span><br><span class="line">          out += String.fromCharCode(((c &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">12</span>) |</span><br><span class="line">                         ((char2 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>) |</span><br><span class="line">                         ((char3 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">0</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="13"><li>完整源码</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ipfsAPI = <span class="built_in">require</span>(<span class="string">'ipfs-api'</span>);</span><br><span class="line"><span class="keyword">const</span> ipfs = ipfsAPI(&#123;<span class="attr">host</span>: <span class="string">'localhost'</span>, <span class="attr">port</span>: <span class="string">'5001'</span>, <span class="attr">protocol</span>: <span class="string">'http'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Utf8ArrayToStr</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> out,</span><br><span class="line">    I,</span><br><span class="line">    len,</span><br><span class="line">    c;</span><br><span class="line">  <span class="keyword">var</span> char2,</span><br><span class="line">    char3;</span><br><span class="line"></span><br><span class="line">  out = <span class="string">""</span>;</span><br><span class="line">  len = array.length;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">    c = array[i++];</span><br><span class="line">    <span class="keyword">switch</span> (c &gt;&gt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="comment">// 0xxxxxxx</span></span><br><span class="line">        out += <span class="built_in">String</span>.fromCharCode(c);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">        <span class="comment">// 110x xxxx   10xx xxxx</span></span><br><span class="line">        char2 = array[i++];</span><br><span class="line">        out += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>) | (char2 &amp; <span class="number">0x3F</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">        <span class="comment">// 1110 xxxx  10xx xxxx  10xx xxxx</span></span><br><span class="line">        char2 = array[i++];</span><br><span class="line">        char3 = array[i++];</span><br><span class="line">        out += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">12</span>) | ((char2 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>) | ((char3 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      strHash: <span class="literal">null</span>,</span><br><span class="line">      strContent: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  saveTextBlobOnIpfs = <span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> descBuffer = Buffer.from(blob, <span class="string">'utf-8'</span>);</span><br><span class="line">      ipfs.add(descBuffer).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">        resolve(response[<span class="number">0</span>].hash);</span><br><span class="line">      &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;div className="App"&gt;</span><br><span class="line">      &lt;input ref="ipfsContent" /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">          let ipfsContent = this.refs.ipfsContent.value;</span><br><span class="line">          console.log(ipfsContent);</span><br><span class="line">          this.saveTextBlobOnIpfs(ipfsContent).then((hash) =&gt; &#123;</span><br><span class="line">            console.log(hash);</span><br><span class="line">            this.setState(&#123;strHash: hash&#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;&#125;&gt;提交到IPFS&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;&#123;this.state.strHash&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">          console.log('从ipfs读取数据。')</span><br><span class="line">          ipfs.cat(this.state.strHash).then((stream) =&gt; &#123;</span><br><span class="line">            console.log(stream);</span><br><span class="line">            let strContent = Utf8ArrayToStr(stream);</span><br><span class="line">            console.log(strContent);</span><br><span class="line">            this.setState(&#123;strContent: strContent&#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;&#125;&gt;读取数据&lt;/button&gt;</span><br><span class="line">      &lt;h1&gt;&#123;this.state.strContent&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><ol start="14"><li>预览结果</li></ol><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d796adhcj31pl0u0qah.jpg" alt="image-20190926203811361"></p>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ipfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode debug</title>
      <link href="/2019/09/17/vscode_debug/"/>
      <url>/2019/09/17/vscode_debug/</url>
      
        <content type="html"><![CDATA[<h4 id="1、为什么需要调试"><a href="#1、为什么需要调试" class="headerlink" title="1、为什么需要调试"></a>1、为什么需要调试</h4><p>写了很多行代码，但是有时候运行的时候遇到了未知的错误，不知道错在哪，有时候错误是某个参数未定义，path找不到等等，这个时候我们就怀疑是值未传递到设置好的参数内，所以可以使用输出语句，但是懂调试的话是写程序的一大利器，且效率极高。</p><p>还有就是console.log这种语句写够了！</p><p>最近一直用vscode写后端和前端，一直在接触nodejs语言，但是一直都不怎么了解vscode的调试，所以决心来学习一下。</p><a id="more"></a><h4 id="2、vscode如何调试"><a href="#2、vscode如何调试" class="headerlink" title="2、vscode如何调试"></a>2、vscode如何调试</h4><p>VScode除了支持JavaScript和TypeScript，还支持Node.js调试，简直就是为前端工程师而生的。</p><h5 id="2-1-先下载一下express模板项目"><a href="#2-1-先下载一下express模板项目" class="headerlink" title="2.1. 先下载一下express模板项目"></a>2.1. 先下载一下express模板项目</h5><ol><li><code>npm install express-generator -g</code></li><li><code>express -v</code> 查看版本</li><li><code>express myapp</code></li><li><code>cd myapp &amp;&amp; npm install</code></li><li><code>npm start</code></li></ol><h5 id="2-2-启动程序后进入vscode主界面"><a href="#2-2-启动程序后进入vscode主界面" class="headerlink" title="2.2 启动程序后进入vscode主界面"></a>2.2 启动程序后进入vscode主界面</h5><ol><li>F5选择nodejs环境，会生成launch.json配置文件</li></ol><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73r2l1khhj312r0j7mzt.jpg" alt="https://tva1.sinaimg.cn/large/006y8mN6ly1g73r2l1khhj312r0j7mzt.jpg"></p><p>其中最重要的配置项就是“Program”字段，这个字段定义了整个应用的入口，开启调试器的时候会从这个入口启动应用。</p><p>查看<code>package.json</code>中是否有包含了键名为<code>start</code>的<code>scripts</code>，如果有的话，就会把start配置的内容作为“program”字段的值。</p><ol start="2"><li>点击绿色三角形，就可以开始调试。</li></ol><p>这时界面上方就会出现一个调试控制的面板，页面右下方会出现一个调试控制台，可以查看你输出的信息，在界面下放会出现一个状态栏，当前的橘黄色表示应用在正常运行</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73r5owvr2j30v3075dgu.jpg" alt="https://tva1.sinaimg.cn/large/006y8mN6ly1g73r5owvr2j30v3075dgu.jpg"></p><ol start="3"><li>设置断点</li></ol><p>设置完断点之后，重新启动调试，然后在浏览器中访问localhost:3000，这时候，断点的形状发生了变化，程序停留在了断点，调试控制面板的按钮也发生了变化</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73rb2ffgmj30yj0e4tat.jpg" alt="https://tva1.sinaimg.cn/large/006y8mN6ly1g73rb2ffgmj30yj0e4tat.jpg"></p><p>从左到右依次是</p><p><strong>单步跳过</strong></p><p><strong>单步调试</strong></p><p><strong>单步跳出</strong></p><p><strong>重启</strong></p><p><strong>停止调试</strong></p><p>这几个都是常见的断点调试指令。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73re1ak3cj31n40epad3.jpg" alt="https://tva1.sinaimg.cn/large/006y8mN6ly1g73re1ak3cj31n40epad3.jpg"></p><h5 id="2-3-调式技巧"><a href="#2-3-调式技巧" class="headerlink" title="2.3 调式技巧"></a>2.3 调式技巧</h5><ol><li>将鼠标防止在断点前的变量或者参数上，也可以查看该变量当前的数值，体验与Chrome开发者工具的调试一致。</li></ol><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g73rg7aib3j318k0n278q.jpg" alt="https://tva1.sinaimg.cn/large/006y8mN6ly1g73rg7aib3j318k0n278q.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技巧</title>
      <link href="/2019/09/17/2019%E5%B9%B409%E6%9C%8818%E6%97%A5%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/09/17/2019%E5%B9%B409%E6%9C%8818%E6%97%A5%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="1、实现chrome全浏览器截图"><a href="#1、实现chrome全浏览器截图" class="headerlink" title="1、实现chrome全浏览器截图"></a>1、实现chrome全浏览器截图</h3><ul><li>右键检查元素</li><li>（mac）win+shift+P</li><li>screen</li><li>full node screen</li><li>保存下图片</li></ul><h3 id="2、word消除所有空行"><a href="#2、word消除所有空行" class="headerlink" title="2、word消除所有空行"></a>2、word消除所有空行</h3><ul><li>选择替换功能</li><li>^p^p替换成^p</li><li>循环多次可实现</li></ul><a id="more"></a><h3 id="3、如何初始化git并且将一些文化忽略掉"><a href="#3、如何初始化git并且将一些文化忽略掉" class="headerlink" title="3、如何初始化git并且将一些文化忽略掉"></a>3、如何初始化git并且将一些文化忽略掉</h3><ul><li>git init</li><li>新建.gitignore</li><li>将文件夹名称写进去</li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g75uiuueu5j318a0au42f.jpg" alt="https://tva1.sinaimg.cn/large/006y8mN6ly1g75uiuueu5j318a0au42f.jpg"></p><h3 id="4-配置vscode与终端结合，终端code-进入vscode"><a href="#4-配置vscode与终端结合，终端code-进入vscode" class="headerlink" title="4.配置vscode与终端结合，终端code .进入vscode"></a>4.配置vscode与终端结合，终端code .进入vscode</h3><ul><li><p>打开vscode，shift+command+p</p></li><li><p>输入shell command</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7d3uawshbj30k002tgm2.jpg" alt="image-20190926184008885"></p></li><li><p>终端进入想要使用的文件夹，输入<code>code .</code>，便打开了vscode</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法说明</title>
      <link href="/2018/12/26/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/12/26/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>markdown语法说明<br>2018年12月26日09:55:41<br>62 篇   </p></blockquote><h3 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h3><p>Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。  </p><p>Markdown也可以理解为将以MARKDOWN语言编写的语言转换成HTML内容的工具，最初是一个perl脚本Markdown.pl。  </p><p>下面正文，Markdown语法主要分为如下几大部分：  </p><p><b>标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’。</b>  </p><a id="more"></a><hr><h3 id="1-基本"><a href="#1-基本" class="headerlink" title="1. 基本"></a>1. 基本</h3><ol><li>标题——使用#，可表示1-6级标题。  </li></ol><p>#一级标题  </p><p>##二级标题  </p><p>###三级标题  </p><p>####四级标题  </p><p>#####五级标题  </p><p>######六级标题  </p><p>效果：  </p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><ol start="2"><li>段落  </li></ol><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。  </p><ol start="3"><li>区块引用  </li></ol><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：  </p><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p><p>效果：  </p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用  </p></blockquote></blockquote><ol start="4"><li>代码区块  </li></ol><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如  </p><p>普通段落：<br>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}  </p><p>代码区块：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello, Markdown."</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​     </p><ol start="5"><li>强调  </li></ol><p>在强调内容两侧分别加上*或者_，如：  </p><p>*斜体*，_斜体_  </p><p>**粗体**，__粗体__  </p><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em>  </p></blockquote><blockquote><p><strong>粗体</strong>，<strong>粗体</strong>  </p></blockquote><ol start="6"><li>列表  </li></ol><p>使用·、+、或-标记无序列表，如：  </p><p>-（+<em>） 第一项 -（+</em>） 第二项 - （+*）第三项</p><p>注意：标记后面最少有一个空格或制表符。若不在引用区块中，必须和前方段落之间存在空行。  </p><p>效果：  </p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以.，如：  </p><p>1.第一项<br>2.第二项<br>3.第三项  </p><p>效果：  </p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><ol start="7"><li>分割线  </li></ol><p>分割线最常使用就是三个或以上*，还可以使用-和_。  </p><hr><ol start="8"><li>反斜杠\  </li></ol><p>相当于反转义作用。使符号成为普通符号。  </p><ol start="9"><li>符号’`’  </li></ol><p>起到标记作用。如：</p><p>`ctrl+a`  </p><p>效果：  </p><blockquote><p><code>ctrl+a</code>  </p></blockquote><h3 id="2-高级"><a href="#2-高级" class="headerlink" title="2. 高级"></a>2. 高级</h3><p>1.空格  &amp;emsp；</p><p>2.换行  &lt;br&gt;</p><p>3.代码  ‘’’   Text ‘’’</p><p>4.删除线   <del>~   text ~</del></p><p>5.加粗    &lt;b&gt;  text  &lt;/b&gt;</p><p>6.网页链接    ctrl+L</p><ol start="7"><li>插入图片，调整大小   </li></ol><img src width="300" hegiht="600" align="center">  <hr><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2>]]></content>
      
      
      <categories>
          
          <category> 技术驿站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术指令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="正在做-gt"><a href="#正在做-gt" class="headerlink" title="正在做&gt;"></a>正在做&gt;</h2><p>读研</p><h2 id="兴趣爱好-gt"><a href="#兴趣爱好-gt" class="headerlink" title="兴趣爱好&gt;"></a>兴趣爱好&gt;</h2><ul><li>爱运动</li><li>爱旅游</li><li>爱唱歌</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类 &amp; 标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
